on_actions = {
	on_startup = {
		effect = { ##party ideology index
			every_possible_country = {
				set_ideology_index = yes
			}
		}
		effect = { ##setup technology slowers, monster unlockers
			every_country = {
				if = {
					limit = { NOT = { has_tech = metallurgy1 } }
					add_ideas = hidden_metallurgy1
				}
				if = {
					limit = { NOT = { has_tech = metallurgy2 } }
					add_ideas = hidden_metallurgy2
				}
				if = {
					limit = { NOT = { has_tech = metallurgy3 } }
					add_ideas = hidden_metallurgy3
				}
				if = {
					limit = { NOT = { has_tech = metallurgy4 } }
					add_ideas = hidden_metallurgy4
				}
				if = {
					limit = { NOT = { has_tech = carpentry1 } }
					add_ideas = hidden_carpentry1
				}
				if = {
					limit = { NOT = { has_tech = carpentry2 } }
					add_ideas = hidden_carpentry2
				}
				if = {
					limit = { NOT = { has_tech = carpentry3 } }
					add_ideas = hidden_carpentry3
				}
				if = {
					limit = { NOT = { has_tech = carpentry4 } }
					add_ideas = hidden_carpentry4
				}
				if = {
					limit = { NOT = { has_tech = agriculture1 } }
					add_ideas = hidden_agriculture1
				}
				if = {
					limit = { NOT = { has_tech = agriculture2 } }
					add_ideas = hidden_agriculture2
				}
				if = {
					limit = { NOT = { has_tech = agriculture3 } }
					add_ideas = hidden_agriculture3
				}
				if = {
					limit = { NOT = { has_tech = agriculture4 } }
					add_ideas = hidden_agriculture4
				}
				###MONSTERS
				if = {
					limit = { has_idea_with_trait = hidden_troll_tamer_trait }
					set_technology = { hidden_troll_unlocker = 1 popup = no }
				}
				if = {
					limit = { has_idea_with_trait = hidden_mumakil_tamer_trait }
					set_technology = { hidden_mumak_unlocker = 1 popup = no }
				}
			}
		}
		effect = { ##setup Easterling khanates
			every_country = {
				limit = { OR = { has_idea = easterling_heritage_idea has_idea = steppe_heritage_idea } }
				load_steppe_warband = yes
			}
		}
		effect = { ##Calculate convoy trade cost
			every_country = {
				limit = { can_celduin_trade = yes }
				calculate_riavod_trade_cost_effect = yes
			}
		}
		
		effect = { #Dwarvish Northron Affinity
			every_possible_country = {
				limit = {
					has_idea = dwarven_heritage_idea
				}
				every_possible_country = {
					limit = {
						has_idea = northern_heritage_idea
					}
					add_opinion_modifier = {
						modifier = affinity_for_dwarves
						target = PREV
					}
					reverse_add_opinion_modifier = {
						modifier = affinity_for_northrons
						target = PREV
					}
				}
			}
		}
		
		effect = { ##make day 1 wine
			FOR = {
				calculate_all_wine_production = yes
			}
			every_state = {
				limit = { market > 0 }
				daily_prosperity_gain = yes
			}
		}
		effect = { ##timed events
			DOR = { #hawin falls ill
				country_event = { id = atem.8 days = 687 } #time for 10 70 day focuses before death
			}
		}
		effect = { ##Set market max level to 5
			every_state = {
				set_variable = { market_max_level = 5 }
			}
		}
	}
	
	on_daily_FOR = { #wine & precious metals gain, prosperity, rhovnaion influence
		effect = {
			calculate_all_wine_production = yes
			#log = "GLOBAL P:[?global.prosperity_per_passthrough] I:[?global.prosperity_per_import] E:[?global.prosperity_per_export]"
			every_state = {
				limit = { market > 0 }
				daily_prosperity_gain = yes
			}
		}
		effect = { #rhovanion influence
			every_country = {
				limit = { can_influence_rhovanion = yes }
				for_each_scope_loop = {
					array = influenced_rhovanion_tags
					#cancels if not still valid
					if = {
						limit = {
							OR = {
								has_opinion = { value < 1 target = PREV }
								PREV = { is_subject = yes }
							}
						}
						remove_from_array = { PREV.influenced_rhovanion_tags = THIS }
					}
					#if still valid, gain influence
					else = {
					#Gets base gain from opinion
						set_temp_variable = { influence_gain = global.max_rhovanion_influence_gain }
						multiply_temp_variable = { influence_gain = opinion@PREV }
						divide_temp_variable = { influence_gain = 100 } #This turn opinion into a 0-1 scale
						#Adds country modifier
						set_temp_variable = { gain_modifier = 1 }
						if = { #Unique modifier
							limit = {
								has_idea = DOR_favored_trader
								PREV = { original_tag = DOR }
							}
							add_to_temp_variable = { gain_modifier = 0.25 }
						}
						add_to_temp_variable = { gain_modifier = PREV.rhovanion_influence_gain_factor }
						multiply_temp_variable = { influence_gain = gain_modifier }
						#Applys it
						add_to_variable = { influence@PREV = influence_gain }
					}
				}
			}
		}
	}
	
	on_monthly_FOR = {
		effect = { ##colony growth
			WLD = {
				every_core_state = {
					limit = { NOT = { is_controlled_by = WLD } }
					set_temp_variable = { growth = controller:modifier@colony_growth_monthly }
					multiply_temp_variable = { growth = controller:modifier@colony_growth_monthly_factor }
					add_manpower = var:growth
					#cost scales by population
					set_variable = { integration_cost = state_population_k }
					divide_variable = { integration_cost = 3 }
					owner = {
						set_variable = { integration_cost = PREV.integration_cost }
					}
				}
			}
		}
		effect = { ##Calculate convoy trade cost
			every_country = {
				limit = { can_celduin_trade = yes }
				calculate_riavod_trade_cost_effect = yes
			}
		}
		effect = { ##number of republics
			calculate_num_republics = yes
		}
	}

	on_monthly = { #low stab events
		effect = {
			if = {
				limit = {
					NOT = { has_country_flag = crisis_in_progress }
				}
				#randomly determines whether to fire an event
				random = {
					chance = var:modifier@low_stability_risk
					set_country_flag = crisis_in_progress
					#randomly determines which event to fire
					random_list = {
						20 = { #draft dodging
							modifier = {
								factor = 0
								OR = {
									has_country_flag = draft_dodging_resolved
									has_idea_with_trait = disarmed_nation_trait
									has_idea_with_trait = volunteer_only_trait
								}
							}
							modifier = {
								factor = 0.1
								has_war_support > 0.5
							}
							add_ideas = draft_dodging 
							country_event = { id = stability.21 random_days = 0 }
						}
						20 = { #strikes
							modifier = {
								factor = 0
								has_country_flag = strikes_resolved
							}
							modifier = {
								factor = 0.1
								OR = {
									has_idea_with_trait = civilian_economy
								}
							}
							modifier = {
								factor = 0.1
								has_stability > 0.5
							}
							add_ideas = strikes_1 
							country_event = { id = stability.22 random_days = 0 }
						}
						20 = { #mutinies
							modifier = {
								factor = 0
								has_country_flag = mutiny_resolved
							}
							modifier = {
								factor = 0.1
								has_war_support > 0.5
							}
							modifier = {
								factor = 0.1
								has_war = no
							}
							modifier = {
								has_any_level_demoralized_army = yes
								factor = 2
							}
							add_ideas = mutiny_1 
							country_event = { id = stability.23 random_days = 0 }
						}
					}
				}
			}
		}
	}
	
	on_weekly = { #Alerts comes back after being dismissed
		effect = {
			if = { #Blood Oath alert
				limit = {
					has_country_flag = dismissed_blood_oath_alert
					NOT = {
						any_other_country = {
							is_greater_enedwaith_tag = yes
							ROOT = {
								set_temp_variable = { total_acceptance = 0 }
								AND = {
									calculate_blood_oath_submission_chance = yes
									check_variable = { total_acceptance > 0.75 }
								}
							}
						}
					}
				}
				clr_country_flag = dismissed_blood_oath_alert
			}
			else_if = { #Market Alert. No countries can get both, hense the else
				limit = {
					has_country_flag = dismissed_market_alert
					NOT = {
						any_controlled_state = {
							check_variable = { prosperity = 100 }
						}
					}
				}
				clr_country_flag = dismissed_market_alert
			}
		}
	}
	
	on_weekly_DOR = { #pay mercenaries
		effect = {
			DOR_pay_mercenaries = yes
		}
	}
	
	on_ruling_party_change = { #party ideology index
		effect = {
			set_ideology_index = yes
		}
		effect = { #prevent bergholda from reducing trade cost when not in power
			if = {
				limit = {
					tag = DOR
					any_other_country = {
						has_idea = bergholda_hidden_trade_modifier
					}
					DOR_bergholda_aldiana = { #she must not be in power
						is_country_leader = no
						is_theorist = no
					}
				}
				bergholda_trade_effect_remove = yes
			}
		}
	}
	
	on_state_control_changed = { #ROOT is new, FROM is old, FROM.FROM is state
		effect = { #If you lose your capital & you're allowed to celduin trade, switch capital to a market state
			if = { #Dale prioritises Laketown
				limit = {
					FROM = {
						check_variable = { capital = FROM.FROM }
						controls_state = 102
					}
				}
				FROM = {
					set_capital = {
					  state = 102
					  remember_old_capital = yes
					}
				}
			}
			else_if = {
				limit = {
					FROM = {
						check_variable = { capital = FROM.FROM }
						allowed_celduin_trade = yes
						any_controlled_state = {
							is_owned_by = PREV
							market > 0
						}
					}
				}
				log = "Capital"
				FROM = {
					random_owned_controlled_state = {
						limit = {
							market > 0
						}
						PREV = {
							set_capital = {
								state = PREV
								remember_old_capital = yes
							}
						}
					}
				}
			}
					
		}
		effect = { ##End wine trade if capital disrupted
			if = { #Riavod changes hands
				limit = {
					FROM.FROM = { state = 116 }
				}
				every_country = {
					limit = { check_variable = { riavod_imports > 0 } }
					FROM = { end_riavod_trade = yes }
				}
			}
			else_if = { #Buyer's capital
				limit = {
					FROM = {
						check_variable = { riavod_imports > 0 }
						check_variable = { capital = FROM.FROM }
						#can_celduin_trade = no
					}
				}
				log = "Imports"
				FROM = { var:116.controller = { end_riavod_trade = yes } }
			}
		}
		effect = { #colony uprising
			if = {
				limit = {
					ROOT = { original_tag = WLD }
					FROM = { NOT = { original_tag = WLD } }
					FROM.FROM = { is_core_of = WLD NOT = { has_state_flag = ongoing_incursion } }
				}
				WLD = {
					##send a leader
					if = {
						limit = { has_character = WLD_wilderness1 }
						WLD_wilderness1 = { set_nationality = ROOT }
					}
					else_if = {
						limit = { has_character = WLD_wilderness2 }
						WLD_wilderness2 = { set_nationality = ROOT }
					}
					else_if = {
						limit = { has_character = WLD_wilderness3 }
						WLD_wilderness3 = { set_nationality = ROOT }
					}
					else_if = {
						limit = { has_character = WLD_wilderness4 }
						WLD_wilderness4 = { set_nationality = ROOT }
					}
					else_if = {
						limit = { has_character = WLD_wilderness5 }
						WLD_wilderness5 = { set_nationality = ROOT }
					}
				}
				ROOT = {
					set_cosmetic_tag = WLD_incursion
					add_equipment_to_stockpile = {
						type = infantry_equipment
						amount = 1000
					}
					add_manpower = 2000
					if = {
						limit = { has_character = WLD_wilderness1 }
						WLD_wilderness1 = { promote_character = clanship promote_character = feudalism promote_character = tribalism promote_character = autocracy promote_character = shadow_worship }
					}
					else_if = {
						limit = { has_character = WLD_wilderness2 }
						WLD_wilderness2 = { promote_character = clanship promote_character = feudalism promote_character = tribalism promote_character = autocracy promote_character = shadow_worship }
					}
					else_if = {
						limit = { has_character = WLD_wilderness3 }
						WLD_wilderness3 = { promote_character = clanship promote_character = feudalism promote_character = tribalism promote_character = autocracy promote_character = shadow_worship }
					}
					else_if = {
						limit = { has_character = WLD_wilderness4 }
						WLD_wilderness4 = { promote_character = clanship promote_character = feudalism promote_character = tribalism promote_character = autocracy promote_character = shadow_worship }
					}
					else_if = {
						limit = { has_character = WLD_wilderness5 }
						WLD_wilderness5 = { promote_character = clanship promote_character = feudalism promote_character = tribalism promote_character = autocracy promote_character = shadow_worship }
					}
				}
				FROM.FROM = {
					set_state_flag = ongoing_incursion
					save_event_target_as = incursion_state
				}
				FROM = { #inside to ensure event target carries over
					activate_targeted_decision = {
						target = FROM.FROM
						decision = uprising_in_colony
					}
					news_event = rfr_news.81
				}
			}
		}
		effect = { #DOR demoralised army
			if = {
				limit = {
					FROM = {
						original_tag = DOR
						has_any_level_demoralized_army = yes
						has_war_with = ROOT #don't demoralise if at peace
						FROM.FROM = { NOT = { is_core_of = PREV } }
					}
				}
				log = "Demoralize"
				#calculate chance to reduce morale
				FROM.FROM = {
					if = {
						limit = { OR = { has_state_category = pastoral has_state_category = small_island } }
						set_temp_variable = { demoralize_chance = 5 }
					}
					else_if = {
						limit = { has_state_category = rural }
						set_temp_variable = { demoralize_chance = 10 }
					}
					else_if = {
						limit = { has_state_category = town }
						set_temp_variable = { demoralize_chance = 20 }
					}
					else_if = {
						limit = { has_state_category = large_town }
						set_temp_variable = { demoralize_chance = 25 }
					}
					else_if = {
						limit = { has_state_category = city }
						set_temp_variable = { demoralize_chance = 30 }
					}
					else_if = {
						limit = { has_state_category = large_city }
						set_temp_variable = { demoralize_chance = 40 }
					}
					else_if = {
						limit = { has_state_category = metropolis }
						set_temp_variable = { demoralize_chance = 50 }
					}
					else_if = {
						limit = { has_state_category = megalopolis }
						set_temp_variable = { demoralize_chance = 60 }
					}
					save_global_event_target_as = demoralize_state
				}
				random = {
					chance = var:demoralize_chance
					FROM = {
						DOR_decrease_army_morale = yes
						news_event = rfr_news.95
					}
				}
			}
			else_if = { #increase army morale
				limit = {
					ROOT = {
						original_tag = DOR
						has_any_level_demoralized_army = yes
						has_war_with = FROM #army doesn't get credit for peaceful aquisition
					}
					FROM.FROM = {
						NOT = { has_state_flag = remoralized_DOR }
						NOT = { is_owned_by = ROOT } #can't get morale boost from recapturing territory you lost
						OR = {
							has_state_flag = ring_victory_point
							any_of_scopes = { #is major capital
								array = global.majors
								capital_scope = { state = PREV }
							}
						}
					}
				}
				FROM.FROM = {
					save_global_event_target_as = remoralize_state
					set_state_flag = remoralized_DOR #can only benefit each state once
					ROOT = {
						DOR_increase_army_morale = yes
						news_event = rfr_news.96
					}
				}
			}
		}
		effect = { #DOR freedom rebels
			if = {
				limit = {
					FROM.FROM = {
						is_core_of = DOR
					}
					ROOT = {
						tag = DOR
						has_completed_focus = DOR_throw_off_the_easterling_yoke
						has_war_with = FROM
					}
				}
				FROM.FROM = {
					create_unit = {
						division = "name = \"Citizen Rebels\" division_template = \"Citizen Rebels\" start_experience_factor = 0.1"
						owner = DOR
						allow_spawning_on_enemy_provs = yes
					}
					create_unit = {
						division = "name = \"Citizen Rebels\" division_template = \"Citizen Rebels\" start_experience_factor = 0.1"
						owner = DOR
						allow_spawning_on_enemy_provs = yes
					}
				}
			}
		}
	}
	
	on_war_relation_added = {
		effect = { ##DOR reconquering RIN & RUS
			if = {
				limit = {
					ROOT = { original_tag = DOR }
					FROM = { OR = { original_tag = RIN original_tag = RUS } }
				}
				ROOT = {
					news_event = rfr_news.97
					set_country_flag = declared_on_rebels
				}
			}
			else_if = {
				limit = {
					FROM = { original_tag = DOR }
					ROOT = { OR = { original_tag = RIN original_tag = RUS } }
				}
				FROM = {
					news_event = rfr_news.97
					set_country_flag = declared_on_rebels
				}
			}
		}
		effect = { ##End wine trade
			if = { #Buyer declares on Seller
				limit = {
					FROM = { controls_state = 116 }
					ROOT = { check_variable = { riavod_imports > 0 } }
				}
				FROM = { end_riavod_trade = yes }
			}
			else_if = { #sSeller declares on Buyer
				limit = {
					ROOT = { controls_state = 116 }
					FROM = { check_variable = { riavod_imports > 0 } }
				}
				FROM = { ROOT = { end_riavod_trade = yes } }
			}
		}
		effect = { ##DOR respawning in DAL
			if = { #Checks if this is a thing that can happen
				limit = {
					NOT = { country_exists = DOR }
					DOR = { has_country_flag = respawn_in_dale }
					OR = { #is dal at war with someone who owns Dorwinion
						AND = {
							ROOT = { tag = DAL }
							FROM = { any_owned_state = { is_core_of = DOR } }
						}
						AND = {
							FROM = { tag = DAL }
							ROOT = { any_owned_state = { is_core_of = DOR } }
						}
					}
				}
				#Checks whether to do DLC or non DLC way
				if = {
					limit = {
						has_dlc = "Man the Guns"
					}
					DOR = {
						become_exiled_in = { target = DAL legitimacy = 30 }
					}
				}
				else = {
					DOR = {
						random_core_state = { ##gives them a state so that they can exist
							limit = {
								owner = {
									has_war_with = DAL
								}
							}
							set_state_owner_to = DOR
						}
					}
					set_autonomy = {
						target = DOR
						autonomy_state = autonomy_puppet
						end_wars = no
						end_civil_wars = no
					}
				}
				#can only happen once
				DOR = {
					clr_country_flag = respawn_in_dale
					##Dor joins war
					if = {
						limit = { FROM = { tag = DAL } }
						add_to_war = {
							targeted_alliance = DAL
							enemy = ROOT
						}
					}
					else = {
						add_to_war = {
							targeted_alliance = DAL
							enemy = FROM
						}
					}
				}
			}
		}
	}

	on_unit_leader_created = { # This uses the UNIT LEADER sub scope of a character, FROM == country
		effect = { #vierling loyalist
			character = {
				if = { 
					limit = {
						is_army_leader = yes
					}
					if = {
						limit = {#done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
							FROM = {
								has_completed_focus = DOR_cultivate_aggressive_officers
								has_character = DOR_vidumarh_vierling
							}
						}
						root = {
							random_list = {
								50 = { 
								}
								50 = { 
									add_unit_leader_trait = vierling_mil
									add_attack = 3
								}
							}
						}
					}
				}
			}
		}
	}

	on_new_term_election = { #elections!
		effect = {
			##save the date in case we need it later
			meta_effect = {
				text = {
					set_variable = { last_election = DATE }
				}
				DATE = "\"[GetDate]\""
			}
			if = { #Dorwin elections
				limit = { original_tag = DOR }
				if = { #first election has differnet text + fires news event to whole world
					limit = { NOT = { has_country_flag = has_had_elections } }
					country_event = rfr_election.1
				}
				else_if = { #free & fair election
					limit = { OR = { has_government = isolationism has_government = freedom } }
					country_event = rfr_election.2
				}
				else_if = { #slightly corrupt election
					limit = { has_government = opportunism }
					country_event = rfr_election.3
				}
			}
			else_if = { #sister republic elections
				limit = { can_form_sister_republic = yes }
				country_event = rfr_election.4
			}
		}
	}
	
	on_assume_faction_leadership = {
		effect = { #steal home of the revolution
			if = {
				limit = {
					FROM = { has_dynamic_modifier = { modifier = DOR_home_of_the_revolution_modifier } }
				}
				FROM = { remove_dynamic_modifier = { modifier = DOR_home_of_the_revolution_modifier } }
				ROOT = { add_dynamic_modifier = { modifier = DOR_home_of_the_revolution_modifier } }
			}
		}
		effect = { #steal head of celduin trade league
			if = {
				limit = {
					FROM = { has_idea = head_of_celduin_trade_league }
				}
				FROM = {
					swap_ideas = {
						remove_idea = head_of_celduin_trade_league
						add_idea = member_of_celduin_trade_league
					}
				}
				ROOT = {
					swap_ideas = {
						remove_idea = member_of_celduin_trade_league
						add_idea = head_of_celduin_trade_league
					}
					set_variable = { global.celduin_trade_leader = THIS }
				}
			}
		}
	}
	
	on_offer_join_faction = { #ROOT & THIS are the faction leader, FROM is the joiner
		effect = {  ##celduin trade league
			if = {
				limit = {
					has_idea = head_of_celduin_trade_league
				}
				FROM = { add_ideas = member_of_celduin_trade_league }
				#tech sharing
				if = {
					limit = {
						is_in_tech_sharing_group = celduin_trade_league_tech_sharing
					}
					FROM = { add_to_tech_sharing_group = celduin_trade_league_tech_sharing }
				}
			}
		}
	}
	
	on_join_faction = { #ROOT & THIS are the joiner, FROM is the faction leader
		effect = {  ##celduin trade league
			if = {
				limit = {
					FROM = { has_idea = head_of_celduin_trade_league }
				}
				add_ideas = member_of_celduin_trade_league
				#tech sharing
				if = {
					limit = {
						FROM = { is_in_tech_sharing_group = celduin_trade_league_tech_sharing }
					}
					add_to_tech_sharing_group = celduin_trade_league_tech_sharing
				}
			}
		}
	}
	
	on_leave_faction = { ##celduin trade league
		effect = {
			if = { #make the new faction leader the trade leader
				limit = {
					has_idea = head_of_celduin_trade_league
				}
				remove_ideas = head_of_celduin_trade_league
				random_country = {
					limit = {
						has_idea = member_of_celduin_trade_league
						is_faction_leader = yes
					}
					swap_ideas = {
						remove_idea = member_of_celduin_trade_league
						add_idea = head_of_celduin_trade_league
					}
					set_variable = { global.celduin_trade_leader = THIS }
				}
			}
		}
	}

	on_subject_annexed = { ##DOR celduinic republic
		effect = {
			if = { #Republic of dale
				limit = {
					ROOT = { has_cosmetic_tag = DAL_republic }
				}
				FROM = {
					set_country_flag = annexed_DAL_republic
					if = { #get cores if we've already taken the focus
						limit = { has_cosmetic_tag = celduin_republic }
						ROOT = {
							every_core_state = {
								add_core_of = FROM
							}
						}
					}
				}
			}
			else_if = { #Republic of Rhovanion
				limit = {
					ROOT = { has_cosmetic_tag = RVN_republic }
				}
				FROM = {
					set_country_flag = annexed_RVN_republic
					if = { #get cores if we've already taken the focus
						limit = { has_cosmetic_tag = celduin_republic }
						ROOT = {
							every_core_state = {
								add_core_of = FROM
							}
						}
					}
				}
			}
		}
	}
}
