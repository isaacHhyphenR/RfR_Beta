scripted_gui = {
	celduin_trade_GUI = {
		context_type = player_context
		window_name = "celduin_trade_ui_window"
		parent_window_token = trade_tab
		visible = { can_celduin_trade = yes }
		properties = {
			flag1 = {
				image = "[first_export_flag]"
				frame = var:global:wine_exporter.ideology_index
			}
		}
		effects = {
			increase_export_1_click = {
				var:global.wine_exporter = {
					#calculate how much actually transfers in this export
					set_temp_variable = { TEMP_export_size = global.export_size }
					clamp_temp_variable = { var = TEMP_export_size max = global.wine_export_available }
					increase_trade_level = yes
				}
			}
			decrease_export_1_click = {
				var:global.wine_exporter = {
					#calculate how much actually transfers in this export
					set_temp_variable = { TEMP_export_size = global.export_size }
					clamp_temp_variable = { var = TEMP_export_size max = ROOT.wine_imported }
					decrease_trade_level = yes
				}
			}
		}
		triggers = {
			increase_export_1_click_enabled = {
				custom_trigger_tooltip = {
					tooltip = cant_import_from_yourself
					NOT = { check_variable = { global.wine_exporter = ROOT } }
				}
				custom_trigger_tooltip = {
					tooltip = first_export_wine_remaining_trigger
					var:global.wine_exporter = { check_variable = { wine_export_available > 0 } } 
				}
				num_of_civilian_factories_available_for_projects > 0
				##convoy cost
				# if = { limit = { var:global.exporter_array^0 = {calculate_trade_convoy_cost = yes } } }
				# subtract_from_temp_variable = { route_convoy_cost = 1 }
				# has_equipment = { convoy > route_convoy_cost }
			}
			decrease_export_1_click_enabled = {
				custom_trigger_tooltip = {
					tooltip = cant_import_from_yourself
					NOT = { check_variable = { global.wine_exporter = ROOT } }
				}
				custom_trigger_tooltip = {
					tooltip = is_importing_wine
					check_variable = { wine_imported > 0 }
				}
			}
		}
		ai_enabled = {
			always = yes
		}
        ai_weights = {
            increase_export_1_click = {
                ai_will_do = { #at least 2 available factories for the first route
					base = 1
					modifier = {
						num_of_civilian_factories_available_for_projects < 2
						factor = 0
					}
					modifier = { #at least 3 factories per subsequent routes
						set_temp_variable = { needed_factories = import_routes }
						multiply_temp_variable = { needed_factories = 3 }
						add_to_temp_variable = { needed_factories = 1 }
						num_of_civilian_factories_available_for_projects < var:needed_factories
						factor = 0
					}
				}
			}
            decrease_export_1_click = {
                ai_will_do = {
					base = 0
					modifier = {
						num_of_civilian_factories_available_for_projects < 1
					}
				}
			}
		}
	}
}