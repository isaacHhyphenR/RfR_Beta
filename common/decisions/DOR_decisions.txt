@campaignFireOnlyOnce = no

DOR_election_category = { #BOP
	debug_elect_aldiana = {
		ai_will_do = {
			factor = 0
		}
		visible = { is_debug = yes }
		complete_effect = {
			add_power_balance_value = {
				id = DOR_election_power_balance
				value = -1
			}
			country_event = atem.7
		}
	}
		
	DOR_campaign_for_the_great_merchants = {
		icon = GFX_decision_great_merchants
		fire_only_once = @campaignFireOnlyOnce
		days_remove = 100
		cost = 50
		cancel_if_not_visible = yes
		ai_will_do = {
			factor = 0
		}
		modifier = {
			power_balance_weekly = -0.005
		}
	}
	DOR_campaign_for_the_winelords = {
		icon = GFX_decision_winelords
		fire_only_once = @campaignFireOnlyOnce
		days_remove = 100
		cost = 50
		cancel_if_not_visible = yes
		ai_will_do = {
			factor = 0
		}
		modifier = {
			power_balance_weekly = 0.005
		}
	}
	distribute_generous_gifts = {
		icon = GFX_decision_great_merchants
		fire_only_once = no
		ai_will_do = {
			factor = 0
		}
		visible = {
			has_completed_focus = DOR_give_generous_gifts
		}
		available = {  }
	}
	DOR_rally_for_lost_provinces = {
		icon = GFX_decision_generic_nationalism
		fire_only_once = yes
		cost = 100
		ai_will_do = {
			factor = 0
		}
		visible = {
			NOT = { has_completed_focus = DOR_reconciliate_with_breakaway_cities }
		}
		available = {
			power_balance_value = {
				id = DOR_election_power_balance
				value > 0.15
			}
		}
		complete_effect = { add_war_support = 0.1 }
	}
	
	##APTITUDE MISSSIONS
	@aptitudeDays = 1000
	aptitude_mission_civs = {
		icon = GFX_decision_eng_ally_imperialist_coup
		fire_only_once = yes
		ai_will_do = { #ASAP
			factor = 10
		}
		days_mission_timeout = 100#@aptitudeDays
		is_good = no
		allowed = { always = no }
		available = { industrial_complex > 14 }
		cancel_trigger = { ##Cancel when election happens
			koldana_aptitude_mission_cancel = yes
		}
		cancel_effect = { koldana_aptitude_mission_cancel_effect = yes }
		complete_effect = { koldana_aptitude_mission_reward = yes }
		timeout_effect = { koldana_aptitude_mission_timeout_effect = yes }
	}
	aptitude_mission_infrastructure = {
		icon = GFX_decision_eng_ally_imperialist_coup
		fire_only_once = yes
		ai_will_do = { #ASAP
			factor = 10
		}
		days_mission_timeout = 100#@aptitudeDays
		is_good = no
		allowed = { always = no }
		available = {
			has_20_core_infrastructure = yes
		}
		cancel_trigger = { ##Cancel when election happens
			koldana_aptitude_mission_cancel = yes
		}
		cancel_effect = { koldana_aptitude_mission_cancel_effect = yes }
		complete_effect = { koldana_aptitude_mission_reward = yes }
		timeout_effect = { koldana_aptitude_mission_timeout_effect = yes }
	}
	aptitude_mission_markets = {
		icon = GFX_decision_eng_ally_imperialist_coup
		fire_only_once = yes
		ai_will_do = { #ASAP
			factor = 10
		}
		days_mission_timeout = 100#@aptitudeDays
		is_good = no
		allowed = { always = no }
		available = {
			market > 5
		}
		cancel_trigger = { ##Cancel when election happens
			koldana_aptitude_mission_cancel = yes
		}
		cancel_effect = { koldana_aptitude_mission_cancel_effect = yes }
		complete_effect = { koldana_aptitude_mission_reward = yes }
		timeout_effect = { koldana_aptitude_mission_timeout_effect = yes }
	}
	aptitude_mission_stability = {
		icon = GFX_decision_eng_ally_imperialist_coup
		fire_only_once = yes
		ai_will_do = { #ASAP
			factor = 10
		}
		days_mission_timeout = 100#@aptitudeDays
		is_good = no
		allowed = { always = no }
		available = {
			has_stability > 0.99
		}
		cancel_trigger = { ##Cancel when election happens
			koldana_aptitude_mission_cancel = yes
		}
		cancel_effect = { koldana_aptitude_mission_cancel_effect = yes }
		complete_effect = { koldana_aptitude_mission_reward = yes }
		timeout_effect = { koldana_aptitude_mission_timeout_effect = yes }
	}
	aptitude_mission_manpower = {
		icon = GFX_decision_eng_ally_imperialist_coup
		fire_only_once = yes
		ai_will_do = { #ASAP
			factor = 10
		}
		days_mission_timeout = 100#@aptitudeDays
		is_good = no
		allowed = { always = no }
		available = {
			has_army_manpower = { size > 199999 }
		}
		cancel_trigger = { ##Cancel when election happens
			koldana_aptitude_mission_cancel = yes
		}
		cancel_effect = { koldana_aptitude_mission_cancel_effect = yes }
		complete_effect = { koldana_aptitude_mission_reward = yes }
		timeout_effect = { koldana_aptitude_mission_timeout_effect = yes }
	}
	aptitude_mission_convoys = {
		icon = GFX_decision_eng_ally_imperialist_coup
		fire_only_once = yes
		ai_will_do = { #ASAP
			factor = 10
		}
		days_mission_timeout = 100#@aptitudeDays
		is_good = no
		allowed = { always = no }
		available = {
			has_100_convoys = yes
		}
		cancel_trigger = { ##Cancel when election happens
			koldana_aptitude_mission_cancel = yes
		}
		cancel_effect = { koldana_aptitude_mission_cancel_effect = yes }
		complete_effect = { koldana_aptitude_mission_reward = yes }
		timeout_effect = { koldana_aptitude_mission_timeout_effect = yes }
	}
}

DOR_great_merchants_category = { #BOP
	DOR_campaign_for_the_burghers = {
		icon = GFX_decision_burghers
		fire_only_once = @campaignFireOnlyOnce
		days_remove = 100
		cost = 50
		cancel_if_not_visible = yes
		ai_will_do = {
			factor = 0
		}
		modifier = {
			power_balance_weekly = -0.005
		}
	}
	DOR_promote_equality = {
		icon = GFX_decision_freedom
		fire_only_once = no
		days_remove = 100
		cost = 50
		available = {
			power_balance_value = {
				id = DOR_great_merchants_power_balance
				value < -0.15
			}
		}
		ai_will_do = {
			factor = 0
			modifier = {
				opportunism > 0.05
				has_decision = DOR_monarchist_plot
				add = 100
			}
		}
		modifier = {
			freedom_drift = 0.1
		}
	}
	DOR_disrupt_social_order = {
		icon = GFX_decision_generic_political_rally
		fire_only_once = yes
		available = {
			power_balance_value = {
				id = DOR_great_merchants_power_balance
				value < -0.15
			}
		}
			
		ai_will_do = {
			factor = 0
			modifier = {
				has_stability > 0.95
				add = 1
			}
		}
		complete_effect = {
			add_stability = -0.1
			add_political_power = 75
		}
	}
	DOR_campaign_for_the_merchant_houses = {
		icon = GFX_decision_merchant_houses
		fire_only_once = @campaignFireOnlyOnce
		days_remove = 100
		cost = 50
		cancel_if_not_visible = yes
		ai_will_do = {
			factor = 0
		}
		modifier = {
			power_balance_weekly = 0.005
		}
	}
	DOR_secure_artisan_support = {
		icon = GFX_decision_gre_investment_decisions
		fire_only_once = no
		days_re_enable = 60
		custom_cost_text = any_state_25_prosperity_cost
		custom_cost_trigger = {
			any_controlled_state = {
				check_variable = { prosperity > 24.99 }
				NOT = { has_state_flag = constructing_market }
			}
		}
			
		complete_effect = {
			hidden_effect = {
				random_controlled_state = {
					limit = {
						check_variable = { prosperity > 24.99 }
						NOT = { has_state_flag = constructing_market }
					}
					subtract_25_prosperity = yes
				}
			}
			add_power_balance_value = {
				id = DOR_great_merchants_power_balance
				value = 0.05
				tooltip_side = DOR_merchant_houses_side
			}
		}
	}
	DOR_attract_sellswords = {
		icon = GFX_decision_generic_manpower
		fire_only_once = no
		days_re_enable = 60
		custom_cost_text = any_state_25_prosperity_cost
		custom_cost_trigger = {
			any_controlled_state = {
				check_variable = { prosperity > 24.99 }
				NOT = { has_state_flag = constructing_market }
			}
		}
		available = {
			has_completed_focus = DOR_rely_on_mercenary_guards
		}
			
		complete_effect = {
			hidden_effect = {
				random_controlled_state = {
					limit = {
						check_variable = { prosperity > 24.99 }
						NOT = { has_state_flag = constructing_market }
					}
					subtract_25_prosperity = yes
				}
			}
			add_manpower = 25000
		}
		# modifier = {
			# weekly_manpower = 5000
		# }
	}
}

rhovanion_influence_category = {
	DOR_core_rinnavuld_compliance = {
		icon = GFX_decision_generic_nationalism
		fire_only_once = yes
		cost = 100
		ai_will_do = {
			factor = 1
		}
		allowed = {
			original_tag = DOR
		}
		visible = {
			has_completed_focus = DOR_gaurantee_the_rights_of_marcher_citizens
			NOT = { 305 = { is_core_of = ROOT } }
		}
		available = {
			305 = {
				is_controlled_by = ROOT
				compliance > 79
			}
		}
		complete_effect = {
			305 = { add_core_of = ROOT }
		}
	}
	DOR_core_ruscovuld_compliance = {
		icon = GFX_decision_generic_nationalism
		fire_only_once = yes
		cost = 100
		ai_will_do = {
			factor = 1
		}
		allowed = {
			original_tag = DOR
		}
		visible = {
			has_completed_focus = DOR_gaurantee_the_rights_of_marcher_citizens
			NOT = { 240 = { is_core_of = ROOT } }
		}
		available = {
			240 = {
				is_controlled_by = ROOT
				compliance > 79
			}
		}
		complete_effect = {
			240 = { add_core_of = ROOT }
		}
	}
}

propaganda_efforts = {
	DOR_the_peoples_army_mission = {
		icon = GFX_decision_generic_nationalism
		fire_only_once = yes
		ai_will_do = { #ASAP
			factor = 10
		}
		days_mission_timeout = 180
		is_good = yes
		allowed = { always = no }
		available = {
			hidden_trigger = { always = no }
		}
		cancel_trigger = {
			has_any_level_demoralized_army = no
		}
		timeout_effect = {
			DOR_increase_army_morale = yes
			if = {
				limit = { has_any_level_demoralized_army = yes }
				activate_mission = DOR_the_peoples_army_mission
			}
		}
	}
}

@guildLoanCG = -0.1
@guildLoanDays = 365
@guildLoanFunds = 1000
DOR_guilds_category = {
	#loans
	take_baking_guild_loan = {
		icon = GFX_decision_baking_guild_loan
		
		ai_will_do = {
			factor = 1
			#take one loan at a time
			modifier = {
				OR = {
					has_decision = take_carpentry_guild_loan
					has_decision = take_smithing_guild_loan
					has_decision = take_tailory_guild_loan
				}
				factor = 0
			}
			#take each loan once
			modifier = {
				has_country_flag = took_baking_guild_loan
				factor = 0
			}
			#Don't take without enough factories to make a difference
			modifier = {
				num_of_factories < 7
				factor = 0
			}
			#Don't take if you hate dorwinion
			modifier = {
				NOT = { original_tag = DOR }
				has_opinion = {
					target = DOR
					value < -15
				}
			}
		}
		visible = {
			DOR_guild_loan_visible = yes
		}
		
		days_remove = @guildLoanDays
		modifier = {
			consumer_goods_factor = @guildLoanCG
		}
		remove_effect = {
			set_country_flag = took_baking_guild_loan
			##Pay the loan back (if not at war with Dorwinion)
			if = {
				limit = {
					NOT = { has_war_with = DOR }
				}
				##Pay a factory
				if = {
					limit = { capital_scope = { industrial_complex > 0 } }
					capital_scope = {
						remove_building = {
							type = industrial_complex
							level = 1
						}
					}
				}
				else = {
					random_controlled_state = {
						limit = { industrial_complex > 0 }
						remove_building = {
							type = industrial_complex
							level = 1
						}
					}
				}
				##Guild uses the money
				DOR = {
					if = {
						limit = { has_dlc = "Arms Against Tyranny" }
						mio:DOR_baking_guild_MIO = {
							add_mio_funds = @guildLoanFunds
						}
					}
					else = {
						upgrade_dorwinion_baking_guild = yes
					}
				}
			}
		}
	}
	take_carpentry_guild_loan = {
		icon = GFX_decision_carpentry_guild_loan
		
		ai_will_do = {
			factor = 1
			#take one loan at a time
			modifier = {
				OR = {
					has_decision = take_baking_guild_loan
					has_decision = take_smithing_guild_loan
					has_decision = take_tailory_guild_loan
				}
				factor = 0
			}
			#take each loan once
			modifier = {
				has_country_flag = took_carpentry_guild_loan
				factor = 0
			}
			#Don't take without enough factories to make a difference
			modifier = {
				num_of_factories < 7
				factor = 0
			}
			#Don't take if you hate dorwinion
			modifier = {
				NOT = { original_tag = DOR }
				has_opinion = {
					target = DOR
					value < -15
				}
			}
		}
		visible = {
			DOR_guild_loan_visible = yes
		}
		
		days_remove = @guildLoanDays
		modifier = {
			consumer_goods_factor = @guildLoanCG
		}
		remove_effect = {
			set_country_flag = took_carpentry_guild_loan
			##Pay the loan back (if not at war with Dorwinion)
			if = {
				limit = {
					NOT = { has_war_with = DOR }
				}
				##Pay a factory
				if = {
					limit = { capital_scope = { industrial_complex > 0 } }
					capital_scope = {
						remove_building = {
							type = industrial_complex
							level = 1
						}
					}
				}
				else = {
					random_controlled_state = {
						limit = { industrial_complex > 0 }
						remove_building = {
							type = industrial_complex
							level = 1
						}
					}
				}
				##Guild uses the money
				DOR = {
					if = {
						limit = { has_dlc = "Arms Against Tyranny" }
						mio:DOR_carpentry_guild_MIO = {
							add_mio_funds = @guildLoanFunds
						}
					}
					else = {
						upgrade_dorwinion_carpentry_guild = yes
					}
				}
			}
		}
	}
	take_smithing_guild_loan = {
		icon = GFX_decision_smithing_guild_loan
		
		ai_will_do = {
			factor = 1
			#take one loan at a time
			modifier = {
				OR = {
					has_decision = take_baking_guild_loan
					has_decision = take_carpentry_guild_loan
					has_decision = take_tailory_guild_loan
				}
				factor = 0
			}
			#take each loan once
			modifier = {
				has_country_flag = took_smithing_guild_loan
				factor = 0
			}
			#Don't take without enough factories to make a difference
			modifier = {
				num_of_factories < 7
				factor = 0
			}
			#Don't take if you hate dorwinion
			modifier = {
				NOT = { original_tag = DOR }
				has_opinion = {
					target = DOR
					value < -15
				}
			}
		}
		visible = {
			DOR_guild_loan_visible = yes
		}
		
		days_remove = @guildLoanDays
		modifier = {
			consumer_goods_factor = @guildLoanCG
		}
		remove_effect = {
			set_country_flag = took_smithing_guild_loan
			##Pay the loan back (if not at war with Dorwinion)
			if = {
				limit = {
					NOT = { has_war_with = DOR }
				}
				##Pay a factory
				if = {
					limit = { capital_scope = { industrial_complex > 0 } }
					capital_scope = {
						remove_building = {
							type = industrial_complex
							level = 1
						}
					}
				}
				else = {
					random_controlled_state = {
						limit = { industrial_complex > 0 }
						remove_building = {
							type = industrial_complex
							level = 1
						}
					}
				}
				##Guild uses the money
				DOR = {
					if = {
						limit = { has_dlc = "Arms Against Tyranny" }
						mio:DOR_smithing_guild_MIO = {
							add_mio_funds = @guildLoanFunds
						}
					}
					else = {
						upgrade_dorwinion_smithing_guild = yes
					}
				}
			}
		}
	}
	take_tailory_guild_loan = {
		icon = GFX_decision_tailory_guild_loan
		
		ai_will_do = {
			factor = 1
			#take one loan at a time
			modifier = {
				OR = {
					has_decision = take_baking_guild_loan
					has_decision = take_carpentry_guild_loan
					has_decision = take_smithing_guild_loan
				}
				factor = 0
			}
			#take each loan once
			modifier = {
				has_country_flag = took_tailory_guild_loan
				factor = 0
			}
			#Don't take without enough factories to make a difference
			modifier = {
				num_of_factories < 7
				factor = 0
			}
			#Don't take if you hate dorwinion
			modifier = {
				NOT = { original_tag = DOR }
				has_opinion = {
					target = DOR
					value < -15
				}
			}
		}
		visible = {
			DOR_guild_loan_visible = yes
		}
		
		days_remove = @guildLoanDays
		modifier = {
			consumer_goods_factor = @guildLoanCG
		}
		remove_effect = {
			set_country_flag = took_tailory_guild_loan
			##Pay the loan back (if not at war with Dorwinion)
			if = {
				limit = {
					NOT = { has_war_with = DOR }
				}
				##Pay a factory
				if = {
					limit = { capital_scope = { industrial_complex > 0 } }
					capital_scope = {
						remove_building = {
							type = industrial_complex
							level = 1
						}
					}
				}
				else = {
					random_controlled_state = {
						limit = { industrial_complex > 0 }
						remove_building = {
							type = industrial_complex
							level = 1
						}
					}
				}
				##Guild uses the money
				DOR = {
					if = {
						limit = { has_dlc = "Arms Against Tyranny" }
						mio:DOR_tailory_guild_MIO = {
							add_mio_funds = @guildLoanFunds
						}
					}
					else = {
						upgrade_dorwinion_tailory_guild = yes
					}
				}
			}
		}
	}
}

DOR_college_category = {
	@DORCollegeCost = 30
	@DORCollegeDays = 30
	
	upgrade_college_of_philosophy = {
		icon = GFX_decision_SOV_academy_of_sciences
		fire_only_once = no
		cost = @DORCollegeCost
		days_remove = @DORCollegeDays
		visible = {
			OR = {
				has_idea = DOR_college_of_philosophy_1
				has_idea = DOR_college_of_philosophy_2
				has_idea = DOR_college_of_philosophy_3
				has_idea = DOR_college_of_philosophy_4
				AND = { #focus increases level cap
					has_idea = DOR_college_of_philosophy_5
					has_completed_focus = DOR_open_the_university_to_the_public
				}
			}
			has_completed_focus = DOR_expand_the_university
		}
		available = {
			NOT = { has_country_flag = upgrading_university }
		}
		ai_will_do = {
			factor = 0
		}
		complete_effect = {
			set_country_flag = upgrading_university
		}
		remove_effect = {
			DOR_upgrade_college_of_philosophy = yes
			clr_country_flag = upgrading_university
		}
	}
	upgrade_college_of_manners = {
		icon = GFX_decision_SOV_academy_of_sciences
		fire_only_once = no
		cost = @DORCollegeCost
		days_remove = @DORCollegeDays
		visible = {
			OR = {
				has_idea = DOR_college_of_manners_1
				has_idea = DOR_college_of_manners_2
				has_idea = DOR_college_of_manners_3
				has_idea = DOR_college_of_manners_4
				AND = { #focus increases level cap
					has_idea = DOR_college_of_manners_5
					has_completed_focus = DOR_open_the_university_to_the_public
				}
			}
			has_completed_focus = DOR_expand_the_university
		}
		available = {
			NOT = { has_country_flag = upgrading_university }
		}
		ai_will_do = {
			factor = 0
		}
		complete_effect = {
			set_country_flag = upgrading_university
		}
		remove_effect = {
			DOR_upgrade_college_of_manners = yes
			clr_country_flag = upgrading_university
		}
	}
	upgrade_college_of_medicine = {
		icon = GFX_decision_SOV_academy_of_sciences
		fire_only_once = no
		cost = @DORCollegeCost
		days_remove = @DORCollegeDays
		visible = {
			OR = {
				has_idea = DOR_college_of_medicine_1
				has_idea = DOR_college_of_medicine_2
				has_idea = DOR_college_of_medicine_3
				has_idea = DOR_college_of_medicine_4
				AND = { #focus increases level cap
					has_idea = DOR_college_of_medicine_5
					has_completed_focus = DOR_open_the_university_to_the_public
				}
			}
			has_completed_focus = DOR_expand_the_university
		}
		available = {
			NOT = { has_country_flag = upgrading_university }
		}
		ai_will_do = {
			factor = 0
		}
		complete_effect = {
			set_country_flag = upgrading_university
		}
		remove_effect = {
			DOR_upgrade_college_of_medicine = yes
			clr_country_flag = upgrading_university
		}
	}
	upgrade_college_of_tactics = {
		icon = GFX_decision_SOV_academy_of_sciences
		fire_only_once = no
		cost = @DORCollegeCost
		days_remove = @DORCollegeDays
		visible = {
			OR = {
				has_idea = DOR_college_of_tactics_1
				has_idea = DOR_college_of_tactics_2
				has_idea = DOR_college_of_tactics_3
				has_idea = DOR_college_of_tactics_4
				AND = { #focus increases level cap
					has_idea = DOR_college_of_tactics_5
					has_completed_focus = DOR_open_the_university_to_the_public
				}
			}
			has_completed_focus = DOR_expand_the_university
		}
		available = {
			NOT = { has_country_flag = upgrading_university }
		}
		ai_will_do = {
			factor = 0
		}
		complete_effect = {
			set_country_flag = upgrading_university
		}
		remove_effect = {
			DOR_upgrade_college_of_tactics = yes
			clr_country_flag = upgrading_university
		}
	}
}

DOR_spread_revolution_category = {
	@complianceForRepublic = 50
	@foundRepublicCost = 50
	establish_ARN_republic = { #ARNOR
		icon = GFX_decision_ARN_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			any_occupied_country = {
				is_arnor_tag = yes
				ROOT = {
					core_compliance = {
						occupied_country_tag = PREV 
						value > @complianceForRepublic
					}
				}
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			ART = {
				custom_effect_tooltip = establish_arnor_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = ART } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = ART
					set_cosmetic_tag = arnor_republic
					set_variable = { ROOT.arnor_republic_var = THIS }
					##this is civil war yall
					every_other_country = {
						limit = { is_arnor_tag = yes }
						add_civil_war_target = PREV
					}
					##Gain cores on all of arnor
					every_possible_country = {
						limit = { is_arnor_tag = yes }
						every_core_state = {
							add_core_of = PREV.PREV
						}
					}
						##final stuff
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_BER_republic = { #ANDUIN
		icon = GFX_decision_BER_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = BER
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			BER = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = BER } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = BER
					set_cosmetic_tag = BER_republic
					set_variable = { ROOT.BER_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = BER
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_DAL_republic = { #DALE
		icon = GFX_decision_DAL_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = DAL
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			DAL = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = DAL } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = DAL
					set_cosmetic_tag = DAL_republic
					set_variable = { ROOT.DAL_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = DAL
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_DAI_republic = { #DRUEDAIN
		icon = GFX_decision_DAI_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = DAI
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			DAI = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = DAI } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = DAI
					set_cosmetic_tag = DAI_republic
					set_variable = { ROOT.DAI_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = DAI
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_gwaithurium_republic = { #gwaithurium
		icon = GFX_decision_gwaithurium_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			any_occupied_country = {
				is_greater_enedwaith_tag = yes
				ROOT = {
					core_compliance = {
						occupied_country_tag = PREV 
						value > @complianceForRepublic
					}
				}
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			DRU = {
				custom_effect_tooltip = establish_gwaithurium_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = DRU } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = DRU
					set_cosmetic_tag = gwaithurium_republic
					set_variable = { ROOT.gwaithurium_republic_var = DRU }
					every_other_country = {
						limit = { is_greater_enedwaith_tag = yes }
						add_civil_war_target = PREV
					}
					##Gain cores on all of gwaithurium
					every_possible_country = {
						limit = { is_greater_enedwaith_tag = yes }
						every_core_state = {
							add_core_of = PREV.PREV
						}
					}
					##final stuff
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_HAR_republic = { #HARAD
		icon = GFX_decision_HAR_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = HAR
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			HAR = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = HAR } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = HAR
					set_cosmetic_tag = HAR_republic
					set_variable = { ROOT.HAR_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = HAR
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_HIL_republic = { #HILDORIEN
		icon = GFX_decision_HIL_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = HIL
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			HIL = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = HIL } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = HIL
					set_cosmetic_tag = HIL_republic
					set_variable = { ROOT.HIL_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = HIL
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_HTH_republic = { #HITHERLANDS
		icon = GFX_decision_HTH_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = HTH
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			HTH = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = HTH } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = HTH
					set_cosmetic_tag = HTH_republic
					set_variable = { ROOT.HTH_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = HTH
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_GON_republic = { #GONDOR
		icon = GFX_decision_GON_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			any_occupied_country = {
				is_gondor_tag = yes
				ROOT = {
					core_compliance = {
						occupied_country_tag = PREV 
						value > @complianceForRepublic
					}
				}
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			GON = {
				custom_effect_tooltip = establish_gondor_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = GON } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = GON
					set_cosmetic_tag = GON_republic
					set_variable = { ROOT.GON_republic_var = THIS }
					##this is civil war yall
					every_other_country = {
						limit = { is_gondor_tag = yes }
						add_civil_war_target = PREV
					}
					##Gain cores on all of GON
					every_possible_country = {
						limit = { is_gondor_tag = yes }
						every_core_state = {
							add_core_of = PREV.PREV
						}
					}
						##final stuff
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_KND_republic = { #KHAND
		icon = GFX_decision_KND_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = KND
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			KND = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = KND } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = KND
					set_cosmetic_tag = KND_republic
					set_variable = { ROOT.KND_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = KND
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_RVN_republic = { #RHOVANION
		icon = GFX_decision_RVN_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			any_occupied_country = {
				is_rhovanion_tag = yes
				ROOT = {
					core_compliance = {
						occupied_country_tag = PREV 
						value > @complianceForRepublic
					}
				}
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			RIN = {
				custom_effect_tooltip = establish_rhovanion_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = RIN } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = RIN
					set_cosmetic_tag = RVN_republic
					set_variable = { ROOT.RVN_republic_var = THIS }
					every_other_country = {
						limit = { is_rhovanion_tag = yes }
						add_civil_war_target = PREV
					}
					##Gain cores on all of rhovanion
					every_possible_country = {
						limit = { is_rhovanion_tag = yes }
						every_core_state = {
							add_core_of = PREV.PREV
						}
					}
					##final stuff
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_RUN_republic = { #RHUN
		icon = GFX_decision_RUN_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			any_occupied_country = {
				is_rhunnic_tag = yes
				ROOT = {
					core_compliance = {
						occupied_country_tag = PREV 
						value > @complianceForRepublic
					}
				}
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			MED = {
				custom_effect_tooltip = establish_rhunnic_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = THIS } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = MED
					set_cosmetic_tag = RUN_republic
					set_variable = { ROOT.RUN_republic_var = MED }
					every_other_country = {
						limit = { is_rhunnic_tag = yes }
						add_civil_war_target = PREV
					}
					##Gain cores on all of rhunnic
					every_possible_country = {
						limit = { is_rhunnic_tag = yes }
						every_core_state = {
							add_core_of = PREV.PREV
						}
					}
					##final stuff
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_ROH_republic = { #ROHAN
		icon = GFX_decision_ROH_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = ROH
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			ROH = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = ROH } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = ROH
					set_cosmetic_tag = ROH_republic
					set_variable = { ROOT.ROH_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = ROH
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_steppe_republic = { #STEPPE
		icon = GFX_decision_steppe_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			any_occupied_country = {
				is_steppe_tag = yes
				ROOT = {
					core_compliance = {
						occupied_country_tag = PREV 
						value > @complianceForRepublic
					}
				}
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			RLM = {
				custom_effect_tooltip = establish_steppe_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = RLM } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = RLM
					set_cosmetic_tag = steppe_republic
					set_variable = { ROOT.steppe_republic_var = RLM }
					every_other_country = {
						limit = { is_steppe_tag = yes }
						add_civil_war_target = PREV
					}
					##Gain cores on all of steppe
					every_possible_country = {
						limit = { is_steppe_tag = yes }
						every_core_state = {
							add_core_of = PREV.PREV
						}
					}
					##final stuff
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	establish_UMB_republic = { #UMBAR
		icon = GFX_decision_UMB_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = UMB
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		cost = @foundRepublicCost
		complete_effect = {
			UMB = {
				custom_effect_tooltip = establish_this_sister_republic_tooltip
				stash_republican_characters = yes #otherwise they can get lost if the original tag no longer exists
			}
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { republic_root = UMB } #used in the scripted effect to transfer characters
				create_dynamic_country = {
					original_tag = UMB
					set_cosmetic_tag = UMB_republic
					set_variable = { ROOT.UMB_republic_var = THIS }
					every_country_with_original_tag = { ##this is civil war yall
						original_tag_to_check = UMB
						add_civil_war_target = PREV
					}
					found_THIS_revolutionary_republic = yes
				}
				#so we know we did it, update home of the revolution modifiers
				establish_sister_republic = yes
			}
		}
	}
	
	debug_convert_all_republics = { ##gives all the 'base' nations their republican cosmetic tags & leaders
		visible = { is_debug = yes }
		complete_effect = {
			ART = {
				set_cosmetic_tag = arnor_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			BER = {
				set_cosmetic_tag = BER_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			DAI = {
				set_cosmetic_tag = DAI_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			DAL = {
				set_cosmetic_tag = DAL_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			DOR = {
				set_cosmetic_tag = DOR_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			RUN = {
				set_cosmetic_tag = RUN_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			RLM = {
				set_cosmetic_tag = steppe_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			DRU = {
				set_cosmetic_tag = gwaithurium_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			GON = {
				set_cosmetic_tag = GON_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			HAR = {
				set_cosmetic_tag = HAR_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			KND = {
				set_cosmetic_tag = KND_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			UMB = {
				set_cosmetic_tag = UMB_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			ROH = {
				set_cosmetic_tag = ROH_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			RIN = {
				set_cosmetic_tag = RVN_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			HTH = {
				set_cosmetic_tag = HTH_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
			HIL = {
				set_cosmetic_tag = HIL_republic
				random_character = {
					limit = { can_be_country_leader = yes has_trait = republic_candidate } #throws errors if I don't have the trait to exclude random characters
					promote_character = republic_isolationism
					promote_character = republic_freedom
					promote_character = corrupt_republic
					remove_trait = { #no longer needs to be marked
						ideology = republic_isolationism
						trait = republic_candidate
					}
				}
			}
		}
	}
}

DOR_monarchist_plot_category = {
	DOR_monarchist_plot = {
		icon = GFX_decision_revolt
		days_mission_timeout = 120
		is_good = no
		allowed = { always = no }
		available = {
			custom_trigger_tooltip = {
				tooltip = DOR_monarchist_plot_available_tooltip
				set_temp_variable = { vierling_size = party_popularity@opportunism }
				add_to_temp_variable = { vierling_size = party_popularity@conquest }
				add_to_temp_variable = { vierling_size = party_popularity@melkorite }
				check_variable = { vierling_size < 0.05 }
			}
		}
		complete_effect = {
			retire_character = DOR_vidumarh_vierling
			set_country_flag = defeated_monarchist_plot
		}
		timeout_effect = {
			custom_effect_tooltip = DOR_monarchist_plot_tooltip
			set_country_flag = monarchist_revolt_happened
			hidden_effect = { ##the tooltip is an absolute mess
				set_temp_variable = { vierling_size = party_popularity@opportunism }
				add_to_temp_variable = { vierling_size = party_popularity@conquest }
				add_to_temp_variable = { vierling_size = party_popularity@melkorite }
				start_civil_war = {
					ideology = conquest
					size = var:vierling_size
					keep_all_characters = yes
					set_country_flag = monarchist_revolt
					hidden_effect = {
						if = { #Uldonavuld
							limit = { ROOT = { owns_state = 311 } }
							transfer_state = 311
						}
						set_cosmetic_tag = VIR
						save_event_target_as = VIR_revolution
						set_country_flag = elected_winelord #so it can do the correct focuses
						every_character = { #get rid of the genericish folks who pop up
							retire = yes
						}
						#makes vidumarh leader
						ROOT = {
							DOR_vidumarh_vierling = { set_nationality = PREV.PREV }
						}
						DOR_vidumarh_vierling = {
							promote_character = elective_monarchy_conquest
							promote_character = elective_monarchy_melkorite
						}
					}
				}
				##transfers all Vierling supports & ~half of Koldana supporters
				every_character = {
					if = {
						limit = { has_character_flag = vierling_supporter }
						set_nationality = event_target:VIR_revolution
					}
					else_if = {
						limit = { has_character_flag = koldana_supporter }
						random = {
							chance = 50
							set_nationality = event_target:VIR_revolution
						}
					}
				}
				####Civil war cancels elections for some reason
				if = {
					limit = { is_republic = yes }
					set_politics = {
						ruling_party = DOR
						elections_allowed = yes
					}
				}
			}
		}
	}
	#######################################################MITIGATION
	DOR_campaign_against_monarchy  = {
		icon = GFX_decision_SWI_swiss_democratic_tradition_campaign
		ai_will_do = {
			factor = 1
		}
		cost = 50
		days_remove = 100
		visible = { has_completed_focus = DOR_investigate_reactionary_plot }
		modifier = {
			opportunism_drift = -0.01
			conquest_drift = -0.01
			melkorite_drift = -0.01
		}
	}
	DOR_disrupt_monarchist_communications  = {
		icon = GFX_decision_onmap_recruit_operative
		ai_will_do = {
			factor = 1
			modifier = { #only do it once
				has_country_flag = delayed_plot
				factor = 0
			}
		}
		cost = 25
		days_remove = 14
		days_re_enable = 50
		visible = { has_completed_focus = DOR_investigate_reactionary_plot }
		remove_effect = {
			add_days_mission_timeout = {
				mission = DOR_monarchist_plot
				days = 50
			}
			set_country_flag = delayed_plot
		}
	}
	DOR_raid_rebel_depots = {
		icon = GFX_decision_generic_civil_support
		ai_will_do = {
			factor = 1
		}
		custom_cost_text = has_500_infantry_equipment_cost_tooltip
		custom_cost_trigger = {
			has_equipment = {
				infantry_equipment > 499
			}
		}
		days_remove = 14
		fire_only_once = yes
		visible = { has_completed_focus = DOR_investigate_reactionary_plot }
		complete_effect = { #cost
			hidden_effect = {
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = -500
				}
			}
		}
		remove_effect = {
			add_days_mission_timeout = {
				mission = DOR_monarchist_plot
				days = 25
			}
			add_popularity = {
				ideology = opportunism
				popularity = -0.01
			}
			add_popularity = {
				ideology = conquest
				popularity = -0.01
			}
		}
	}
	DOR_arrest_shadow_worshippers = {
		icon = GFX_decision_generic_arrest
		ai_will_do = {
			factor = 1
		}
		cost = 25
		fire_only_once = yes
		visible = {
			has_completed_focus = DOR_investigate_reactionary_plot
			melkorite > 0.001 #at least 0.1% melkorite support
		}
		complete_effect = { #cost
			add_popularity = {
				ideology = melkorite
				popularity = -0.025
			}
		}
	}
}

celduin_trade_category = {
	@spendProsperityPPCost = 0
	DOR_boost_other_market = {
		icon = GFX_decision_upgrade_market
		fire_only_once = no
		#cost = @spendProsperityPPCost
		custom_cost_trigger = { always = yes } #can't check state variable
		custom_cost_text = cost_market_prosperity
		ai_will_do = {
			factor = 0.5
			modifier = { #fully upgrade market first
				FROM = { market < var:market_max_level }
				factor = 0
			}
		}
		allowed = { original_tag = DOR }
		state_target = yes
		target_array = global.celduin_markets
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		visible = {
			power_balance_value = {
				id = DOR_great_merchants_power_balance
				value > 0.499
			}
			check_variable = { FROM.prosperity = 100 }
		}
		target_trigger = {
			FROM = {
				is_controlled_by = ROOT
				check_variable = { prosperity = 100 }
				NOT = { has_state_flag = constructing_market }
			}
		}
		available = {
			any_controlled_state = {
				market > 0
				custom_trigger_tooltip = {
					tooltip = less_than_100_prosperity_tooltip
					check_variable = { prosperity < 100 }
				}
			}
		}
		complete_effect = { #adds 25 prosperity to a different market
			##tries to add to a core market that can fully benefit
			if = {
				limit = {
					any_controlled_state = {
						is_core_of = ROOT
						market > 0
						check_variable = { prosperity < 76 }
					}
				}
				random_controlled_state = {
					limit = {
						is_core_of = ROOT
						market > 0
						check_variable = { prosperity < 76 }
					}
					add_25_prosperity = yes
				}
			}
			##tries to add to a core market that can somewhat benefit
			else_if = {
				limit = {
					any_controlled_state = {
						is_core_of = ROOT
						market > 0
						check_variable = { prosperity < 100 }
					}
				}
				random_controlled_state = {
					limit = {
						is_core_of = ROOT
						market > 0
						check_variable = { prosperity < 100 }
					}
					add_25_prosperity = yes
				}
			}
			##adds to any market that can benefit
			else = {
				random_controlled_state = {
					limit = {
						market > 0
						check_variable = { prosperity < 100 }
					}
					add_25_prosperity = yes
				}
			}
			##do this at the end so it doesn't accidentally select itself
			set_variable = { FROM.prosperity = 0 }
		}
	}
	DOR_prosperity_for_resources = {
		icon = GFX_decision_resources
		fire_only_once = no
		#cost = @spendProsperityPPCost
		custom_cost_trigger = { always = yes } #can't check state variable
		custom_cost_text = cost_market_prosperity
		ai_will_do = {
			factor = 1
			modifier = { #fully upgrade market first
				FROM = { market < var:market_max_level }
				factor = 0
			}
		}
		allowed = { original_tag = DOR }
		state_target = yes
		target_array = global.celduin_markets
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		visible = {
			power_balance_value = {
				id = DOR_great_merchants_power_balance
				value > 0.749
			}
			check_variable = { FROM.prosperity = 100 }
		}
		target_trigger = {
			FROM = {
				is_controlled_by = ROOT
				check_variable = { prosperity = 100 }
				NOT = { has_state_flag = constructing_market }
			}
		}
		complete_effect = { #choose between food, wood, cloth, or iron
			set_variable = { FROM.prosperity = 0 }
			FROM = { save_event_target_as = market_resource_state }
			country_event = { id = atem.18 }
			custom_effect_tooltip = DOR_prosperity_for_resources_tooltip
		}
	}
	DOR_prosperity_for_factory = {
		icon = GFX_decision_generic_factory
		fire_only_once = no
		#cost = @spendProsperityPPCost
		custom_cost_trigger = { always = yes } #can't check state variable
		custom_cost_text = cost_market_prosperity
		ai_will_do = {
			factor = 2
			modifier = { #fully upgrade market first
				FROM = { market < var:market_max_level }
				factor = 0
			}
		}
		allowed = { original_tag = DOR }
		state_target = yes
		target_array = global.celduin_markets
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		visible = {
			power_balance_value = {
				id = DOR_great_merchants_power_balance
				value > 0.99
			}
			check_variable = { FROM.prosperity = 100 }
		}
		available = {
			FROM = {
				free_building_slots = {
					building = industrial_complex
					size > 0
					include_locked = no
				}
			}
		}
		target_trigger = {
			FROM = {
				is_controlled_by = ROOT
				check_variable = { prosperity = 100 }
				NOT = { has_state_flag = constructing_market }
			}
		}
		complete_effect = { #adds 1 civ to the state
			set_variable = { FROM.prosperity = 0 }
			FROM = {
				add_building_construction = {
					type = industrial_complex
					level = 1
					instant_build = yes
				}
			}
		}
	}
}

DOR_mercenary_category = {
	@recruitMercenariesDays = 50
	DOR_recruit_riverstalkers = {
		icon = GFX_decision_riverstalkers
		custom_cost_text = has_2_civ_factory_cost_tooltip
		custom_cost_trigger = {
			num_of_civilian_factories_available_for_projects > 1
		}
		allowed = { NOT = { has_dlc = "Arms Against Tyranny" } }
		visible = {
			has_completed_focus = DOR_hire_the_rabble
			NOT = { has_country_flag = disbanded_riverstalkers }
		}
		available = {
			custom_trigger_tooltip = {
				tooltip = riverstalkers_within_cap
				check_variable = { num_battalions_with_type@riverstalkers_banner < riverstalkers_cap }
			}
		}
		days_remove = var:mercenaryDecisionDays
		modifier = {
			civilian_factory_use = 2
		}
		complete_effect = {
			capital_scope = {
				custom_effect_tooltip = create_rivers_infantry_unit
				hidden_effect = {
					create_unit = {
						division = "name = \"Riverstalkers\" division_template = \"Riverstalkers\" start_experience_factor = 0.075"
						owner = ROOT
					}
				}
			}
		}
	}
	DOR_recruit_mountains_vengeance = {
		icon = GFX_decision_mountains_vengeance
		custom_cost_text = has_3_civ_factory_cost_tooltip
		custom_cost_trigger = {
			num_of_civilian_factories_available_for_projects > 2
		}
		allowed = { NOT = { has_dlc = "Arms Against Tyranny" } }
		visible = {
			has_completed_focus = DOR_hire_the_dwarves
			NOT = { has_country_flag = disbanded_mountains_vengeance }
		}
		available = {
			custom_trigger_tooltip = {
				tooltip = mountains_vengeance_within_cap
				check_variable = { num_battalions_with_type@mountains_vengeance_banner < mountains_vengeance_cap }
			}
		}
		days_remove = var:mercenaryDecisionDays
		modifier = {
			civilian_factory_use = 2
		}
		complete_effect = {
			capital_scope = {
				custom_effect_tooltip = create_mountains_infantry_unit
				hidden_effect = {
					create_unit = {
						division = "name = \"Mountain's Infantry\" division_template = \"Mountain's Infantry\" start_experience_factor = 0.4"
						owner = ROOT
					}
				}
			}
		}
	}
	DOR_recruit_dragons_breath = {
		icon = GFX_decision_dragons_breath
		custom_cost_text = has_3_civ_factory_cost_tooltip
		custom_cost_trigger = {
			num_of_civilian_factories_available_for_projects > 2
		}
		allowed = { NOT = { has_dlc = "Arms Against Tyranny" } }
		visible = {
			has_completed_focus = DOR_hire_the_dwarves
			NOT = { has_country_flag = disbanded_dragons_breath }
		}
		available = {
			custom_trigger_tooltip = {
				tooltip = dragons_breath_within_cap
				check_variable = { num_battalions_with_type@dragons_breath_banner < dragons_breath_cap }
			}
		}
		days_remove = var:mercenaryDecisionDays
		modifier = {
			civilian_factory_use = 2
		}
		complete_effect = {
			capital_scope = {
				custom_effect_tooltip = create_dragons_cavalry_unit
				hidden_effect = {
					create_unit = {
						division = "name = \"Dragon's Cavalry\" division_template = \"Dragon's Cavalry\" start_experience_factor = 0.4"
						owner = ROOT
					}
				}
			}
		}
	}
	DOR_recruit_company_of_winter_infantry = {
		icon = GFX_decision_company_of_winter
		custom_cost_text = has_4_civ_factory_cost_tooltip
		custom_cost_trigger = {
			num_of_civilian_factories_available_for_projects > 3
		}
		allowed = { NOT = { has_dlc = "Arms Against Tyranny" } }
		visible = {
			has_completed_focus = DOR_hire_the_elites
			NOT = { has_country_flag = disbanded_company_of_winter }
		}
		available = {
			custom_trigger_tooltip = {
				tooltip = company_of_winter_within_cap
				check_variable = { num_battalions_with_type@company_of_winter_banner < company_of_winter_cap }
			}
		}
		days_remove = var:mercenaryDecisionDays
		modifier = {
			civilian_factory_use = 4
		}
		complete_effect = {
			capital_scope = {
				custom_effect_tooltip = create_winters_infantry_unit
				hidden_effect = {
					create_unit = {
						division = "name = \"Winter's Infantry\" division_template = \"Winter's Infantry\" start_experience_factor = 0.75"
						owner = ROOT
					}
				}
			}
		}
	}
	DOR_recruit_company_of_winter_cavalry = {
		icon = GFX_decision_company_of_winter
		custom_cost_text = has_4_civ_factory_cost_tooltip
		custom_cost_trigger = {
			num_of_civilian_factories_available_for_projects > 3
		}
		allowed = { NOT = { has_dlc = "Arms Against Tyranny" } }
		visible = {
			has_completed_focus = DOR_hire_the_elites
			NOT = { has_country_flag = disbanded_company_of_winter }
		}
		available = {
			custom_trigger_tooltip = {
				tooltip = company_of_winter_within_cap
				check_variable = { num_battalions_with_type@company_of_winter_banner < company_of_winter_cap }
			}
		}
		days_remove = var:mercenaryDecisionDays
		modifier = {
			civilian_factory_use = 4
		}
		complete_effect = {
			capital_scope = {
				custom_effect_tooltip = create_winters_cavalry_unit
				hidden_effect = {
					create_unit = {
						division = "name = \"Winter's Knights\" division_template = \"Winter's Knights\" start_experience_factor = 0.75"
						owner = ROOT
					}
				}
			}
		}
	}

	@mercEquipCost = 200
	@mercEquipCostNeg = -200
	DOR_riverstalkers_equipment = {
		icon = GFX_decision_riverstalkers
		custom_cost_text = riverstalkers_100_funds
		custom_cost_trigger = {
			mio:DOR_riverstalkers_MIO = {
				check_variable = {
					var = funds
					value = @mercEquipCost
					compare = greater_than_or_equals
				}
			}
		}
		allowed = { has_dlc = "Arms Against Tyranny" }
		visible = {
			has_completed_focus = DOR_hire_the_rabble
			NOT = { has_country_flag = disbanded_riverstalkers }
		}
		ai_will_do = {
			factor = 1
			modifier = { #once every 180 days
				has_country_flag = equipped_riverstalkers
				factor = 0
			}
			modifier = { #no need to do so
				has_equipment = {
					infantry_equipment > 100
				}
				factor = 0
			}
			modifier = { #nothing else to spend on
				mio:DOR_riverstalkers_MIO = {
					has_mio_size > 11
				}
				add = 100
			}
		}
			
		complete_effect = {
			hidden_effect = {
				mio:DOR_riverstalkers_MIO = {
					add_mio_funds = @mercEquipCostNeg
				}
			}
			if = { #+2 irregulars
				limit = {
					mio:DOR_riverstalkers_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_irregulars2
					}
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 730
				}
			}
			else_if = { #+1 irregulars
				limit = {
					mio:DOR_riverstalkers_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_irregulars
					}
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 650
				}
			}
			else = { #Normal
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 570
				}
			}
			if = { #+2 javs
				limit = {
					mio:DOR_riverstalkers_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_javelins2
					}
				}
				add_equipment_to_stockpile = {
					type = rocket_artillery_equipment
					amount = 72
				}
			}
			else_if = { #+1 javs
				limit = {
					mio:DOR_riverstalkers_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_javelins
					}
				}
				add_equipment_to_stockpile = {
					type = rocket_artillery_equipment
					amount = 36
				}
			}
			else_if = { #+support javs
				limit = {
					mio:DOR_riverstalkers_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_support_javelins
					}
				}
				add_equipment_to_stockpile = {
					type = rocket_artillery_equipment
					amount = 12
				}
			}
			set_country_flag = { #Don't take more than once every 180 days
				flag = equipped_riverstalkers
				days = 180
			}
		}
	}
	DOR_mountains_vengeance_equipment = {
		icon = GFX_decision_mountains_vengeance
		custom_cost_text = mountains_vengeance_100_funds
		custom_cost_trigger = {
			mio:DOR_mountains_vengeance_MIO = {
				check_variable = {
					var = funds
					value = @mercEquipCost
					compare = greater_than_or_equals
				}
			}
		}
		allowed = { has_dlc = "Arms Against Tyranny" }
		visible = {
			has_completed_focus = DOR_hire_the_dwarves
			NOT = { has_country_flag = disbanded_mountains_vengeance }
		}
		ai_will_do = {
			factor = 1
			modifier = { #once every 180 days
				has_country_flag = equipped_mountains_vengeance
				factor = 0
			}
			modifier = { #no need to do so
				has_equipment = {
					infantry_equipment > 100
				}
				has_equipment = {
					infantry_armor > 100
				}
				factor = 0
			}
			modifier = { #nothing else to spend on
				mio:DOR_mountains_vengeance_MIO = {
					has_mio_size > 15
				}
				add = 100
			}
		}
			
		complete_effect = {
			hidden_effect = {
				mio:DOR_mountains_vengeance_MIO = {
					add_mio_funds = @mercEquipCostNeg
				}
			}
			if = { #+2 heavy infantry
				limit = {
					mio:DOR_mountains_vengeance_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_infantry2
					}
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 500
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 500
				}
			}
			else_if = { #+1 heavy infantry
				limit = {
					mio:DOR_mountains_vengeance_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_infantry
					}
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 400
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 400
				}
			}
			else = { #Normal infantry
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 300
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 300
				}
			}
			if = { #+2 heavy pikes
				limit = {
					mio:DOR_mountains_vengeance_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_infantry2
					}
				}
				add_equipment_to_stockpile = {
					type = anti_tank_equipment
					amount = 500
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 500
				}
			}
			else_if = { #+1 heavy pikes
				limit = {
					mio:DOR_mountains_vengeance_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_infantry
					}
				}
				add_equipment_to_stockpile = {
					type = anti_tank_equipment
					amount = 400
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 400
				}
			}
			else = { #Normal infantry
				add_equipment_to_stockpile = {
					type = anti_tank_equipment
					amount = 300
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 300
				}
			}
			if = { #+bows & support bows
				limit = {
					mio:DOR_mountains_vengeance_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_crossbows
						is_mio_trait_completed = dorwinion_trait_add_support_crossbows
					}
				}
				add_equipment_to_stockpile = {
					type = artillery_equipment
					amount = 120
				}
			}
			else_if = { #+bows
				limit = {
					mio:DOR_mountains_vengeance_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_crossbows
					}
				}
				add_equipment_to_stockpile = {
					type = artillery_equipment
					amount = 72
				}
			}
			else_if = { #+support bows
				limit = {
					mio:DOR_mountains_vengeance_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_support_crossbows
					}
				}
				add_equipment_to_stockpile = {
					type = artillery_equipment
					amount = 48
				}
			}
			else = { #normal bows
				add_equipment_to_stockpile = {
					type = artillery_equipment
					amount = 36
				}
			}
			set_country_flag = { #Don't take more than once every 180 days
				flag = equipped_mountains_vengeance
				days = 180
			}
		}
	}
	DOR_dragons_breath_equipment = {
		icon = GFX_decision_dragons_breath
		custom_cost_text = dragons_breath_100_funds
		custom_cost_trigger = {
			mio:DOR_dragons_breath_MIO = {
				check_variable = {
					var = funds
					value = @mercEquipCost
					compare = greater_than_or_equals
				}
			}
		}
		allowed = { has_dlc = "Arms Against Tyranny" }
		visible = {
			has_completed_focus = DOR_hire_the_cavalry
			NOT = { has_country_flag = disbanded_dragons_breath }
		}
		ai_will_do = {
			factor = 1
			modifier = { #once every 180 days
				has_country_flag = equipped_dragons_breath
				factor = 0
			}
			modifier = { #no need to do so
				has_equipment = {
					light_tank_chassis > 50
				}
				has_equipment = {
					mechanized_equipment > 50
				}
				factor = 0
			}
			modifier = { #nothing else to spend on
				mio:DOR_dragons_breath_MIO = {
					has_mio_size > 13
				}
				add = 100
			}
		}
			
		complete_effect = {
			hidden_effect = {
				mio:DOR_dragons_breath_MIO = {
					add_mio_funds = @mercEquipCostNeg
				}
			}
			if = { #+chariot
				limit = {
					mio:DOR_dragons_breath_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_chariot
					}
				}
				add_equipment_to_stockpile = {
					type = light_tank_chassis
					amount = 200
				}
				add_equipment_to_stockpile = {
					type = mechanized_equipment
					amount = 160
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 400
				}
				add_equipment_to_stockpile = {
					type = artillery_equipment
					amount = 12
				}
			}
			else = { #Normal
				add_equipment_to_stockpile = {
					type = light_tank_chassis
					amount = 200
				}
				add_equipment_to_stockpile = {
					type = mechanized_equipment
					amount = 120
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 350
				}
				add_equipment_to_stockpile = {
					type = artillery_equipment
					amount = 12
				}
			}
			if = { #+2 lancers
				limit = {
					mio:DOR_dragons_breath_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_lancers2
					}
				}
				add_equipment_to_stockpile = {
					type = medium_tank_destroyer_chassis
					amount = 100
				}
			}
			else_if = { #+1 lancer
				limit = {
					mio:DOR_dragons_breath_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_lancers
					}
				}
				add_equipment_to_stockpile = {
					type = medium_tank_destroyer_chassis
					amount = 50
				}
			}
			else_if = { #+2 skirmishers
				limit = {
					mio:DOR_dragons_breath_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_light_skirmishers2
					}
				}
				add_equipment_to_stockpile = {
					type = light_tank_artillery_chassis
					amount = 100
				}
			}
			else_if = { #+1 skirmishers
				limit = {
					mio:DOR_dragons_breath_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_light_skirmishers
					}
				}
				add_equipment_to_stockpile = {
					type = light_tank_artillery_chassis
					amount = 50
				}
			}
			set_country_flag = { #Don't take more than once every 180 days
				flag = equipped_dragons_breath
				days = 180
			}
		}
	}
	DOR_company_of_winter_equipment_infantry = {
		icon = GFX_decision_company_of_winter
		custom_cost_text = company_of_winter_100_funds
		custom_cost_trigger = {
			mio:DOR_company_of_winter_MIO = {
				check_variable = {
					var = funds
					value = @mercEquipCost
					compare = greater_than_or_equals
				}
			}
		}
		allowed = { has_dlc = "Arms Against Tyranny" }
		visible = {
			has_completed_focus = DOR_hire_the_elites
			NOT = { has_country_flag = disbanded_company_of_winter }
		}
		ai_will_do = {
			factor = 1
			modifier = { #once every 180 days
				has_country_flag = equipped_company_of_winter
				factor = 0
			}
			modifier = { #no need to do so
				has_equipment = {
					infantry_equipment > 100
				}
				factor = 0
			}
			modifier = { #nothing else to spend on
				mio:DOR_company_of_winter_MIO = {
					has_mio_size > 17
				}
				add = 100
			}
		}
			
		complete_effect = {
			hidden_effect = {
				mio:DOR_company_of_winter_MIO = {
					add_mio_funds = @mercEquipCostNeg
				}
			}
			if = { #+3 infantry
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_two_heavy_infantry
					}
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 1200
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 800
				}
			}
			else_if = { #+1 infantry
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_infantry
					}
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 1000
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 6000
				}
			}
			else_if = { #+3 pikes
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_two_heavy_pikes
					}
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 900
				}
				add_equipment_to_stockpile = {
					type = anti_tank_equipment
					amount = 300
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 800
				}
			}
			else_if = { #+1 pikes
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_pikes
					}
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 900
				}
				add_equipment_to_stockpile = {
					type = anti_tank_equipment
					amount = 100
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 600
				}
			}
			else = { #Normal
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 900
				}
				add_equipment_to_stockpile = {
					type = infantry_armor
					amount = 500
				}
			}
			if = { #+3 bows
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_two_bows
					}
				}
				add_equipment_to_stockpile = {
					type = artillery_equipment
					amount = 100
				}
			}
			else_if = { #+1 bows
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_bows
					}
				}
				add_equipment_to_stockpile = {
					type = artillery_equipment
					amount = 35
				}
			}
			set_country_flag = { #Don't take more than once every 180 days
				flag = equipped_company_of_winter
				days = 180
			}
		}
	}
	DOR_company_of_winter_equipment_cavalry = {
		icon = GFX_decision_company_of_winter
		custom_cost_text = company_of_winter_100_funds
		custom_cost_trigger = {
			mio:DOR_company_of_winter_MIO = {
				check_variable = {
					var = funds
					value = @mercEquipCost
					compare = greater_than_or_equals
				}
			}
		}
		allowed = { has_dlc = "Arms Against Tyranny" }
		visible = {
			has_completed_focus = DOR_hire_the_elites
			NOT = { has_country_flag = disbanded_company_of_winter }
		}
		ai_will_do = {
			factor = 1
			modifier = { #once every 180 days
				has_country_flag = equipped_company_of_winter
				factor = 0
			}
			modifier = { #no need to do so
				has_equipment = {
					medium_tank_chassis > 50
				}
				has_equipment = {
					motorized_equipment > 50
				}
				factor = 0
			}
			modifier = { #nothing else to spend on
				mio:DOR_company_of_winter_MIO = {
					has_mio_size > 11
				}
				add = 100
			}
		}
			
		complete_effect = {
			hidden_effect = {
				mio:DOR_company_of_winter_MIO = {
					add_mio_funds = @mercEquipCostNeg
				}
			}
			if = { #+3 heavy cav
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_two_heavy_cavalry
					}
				}
				add_equipment_to_stockpile = {
					type = medium_tank_chassis
					amount = 400
				}
				add_equipment_to_stockpile = {
					type = motorized_equipment
					amount = 140
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 400
				}
			}
			else_if = { #+1 heavy cav
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_cavalry
					}
				}
				add_equipment_to_stockpile = {
					type = medium_tank_chassis
					amount = 300
				}
				add_equipment_to_stockpile = {
					type = motorized_equipment
					amount = 140
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 400
				}
			}
			else = { #Normal
				add_equipment_to_stockpile = {
					type = medium_tank_chassis
					amount = 250
				}
				add_equipment_to_stockpile = {
					type = motorized_equipment
					amount = 140
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment
					amount = 400
				}
			}
			if = { #+3 lancers
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_two_heavy_lancers
					}
				}
				add_equipment_to_stockpile = {
					type = medium_tank_destroyer_chassis
					amount = 150
				}
			}
			else_if = { #+1 lancers
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_heavy_lancers
					}
				}
				add_equipment_to_stockpile = {
					type = medium_tank_destroyer_chassis
					amount = 50
				}
			}
			if = { #+3 skirmishers
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_two_light_skirmishers
					}
				}
				add_equipment_to_stockpile = {
					type = light_tank_artillery_chassis
					amount = 10
				}
			}
			else_if = { #+1 skirmishers
				limit = {
					mio:DOR_company_of_winter_MIO = {
						is_mio_trait_completed = dorwinion_trait_add_light_skirmishers
					}
				}
				add_equipment_to_stockpile = {
					type = light_tank_artillery_chassis
					amount = 50
				}
			}
			set_country_flag = { #Don't take more than once every 180 days
				flag = equipped_company_of_winter
				days = 180
			}
		}
	}

	
	DOR_disband_riverstalkers = {
		icon = GFX_decision_disband_riverstalkers
		fire_only_once = yes
		visible = { has_completed_focus = DOR_hire_the_rabble }
		cost = 25
		ai_will_do = {
			factor = 0
		}
		complete_effect = {
			custom_effect_tooltip = disband_riverstalkers
			set_country_flag = disbanded_riverstalkers
			delete_unit_template_and_units = {
				division_template = "Riverstalkers"
				disband = no #will not refund equipment and manpower
			}
			if = {
				limit = { has_dlc = "Arms Against Tyranny" }
				calculate_riverstalkers_costs = yes
				hidden_effect = { remove_dynamic_modifier = { modifier = riverstalkers_payment } }
			}
			else_if = {
				limit = { has_idea = DOR_hire_riverstalkers }
				remove_ideas = DOR_hire_riverstalkers
			}
		}
	}
	DOR_disband_mountains_vengeance = {
		icon = GFX_decision_disband_mountains_vengeance_decision
		fire_only_once = yes
		visible = { has_completed_focus = DOR_hire_the_dwarves }
		cost = 25
		ai_will_do = {
			factor = 0
		}
		complete_effect = {
			custom_effect_tooltip = disband_mountains_vengeance
			set_country_flag = disbanded_mountains_vengeance
			delete_unit_template_and_units = {
				division_template = "Mountain's Infantry"
				disband = no #will not refund equipment and manpower
			}
			if = {
				limit = { has_dlc = "Arms Against Tyranny" }
				calculate_mountains_vengeance_costs = yes
				hidden_effect = { remove_dynamic_modifier = { modifier = mountains_vengeance_payment } }
			}
			else_if = {
				limit = { has_idea = DOR_hire_mountains_vengeance }
				remove_ideas = DOR_hire_mountains_vengeance
			}
		}
	}
	DOR_disband_dragons_breath = {
		icon = GFX_decision_disband_ragons_breath_decision
		fire_only_once = yes
		visible = { has_completed_focus = DOR_hire_the_cavalry }
		cost = 25
		ai_will_do = {
			factor = 0
		}
		complete_effect = {
			custom_effect_tooltip = disband_dragons_breath
			set_country_flag = disbanded_dragons_breath
			delete_unit_template_and_units = {
				division_template = "Dragon's Cavalry"
				disband = no #will not refund equipment and manpower
			}
			if = {
				limit = { has_dlc = "Arms Against Tyranny" }
				calculate_dragons_breath_costs = yes
				hidden_effect = { remove_dynamic_modifier = { modifier = dragons_breath_payment } }
			}
			else_if = {
				limit = { has_idea = DOR_hire_dragons_breath }
				remove_ideas = DOR_hire_dragons_breath
			}
		}
	}
	DOR_disband_company_of_winter = {
		icon = GFX_decision_disband_company_of_winter_decision
		fire_only_once = yes
		visible = { has_completed_focus = DOR_hire_the_elites }
		cost = 25
		ai_will_do = {
			factor = 0
		}
		complete_effect = {
			custom_effect_tooltip = disband_company_of_winter
			set_country_flag = disbanded_company_of_winter
			delete_unit_template_and_units = {
				division_template = "Winters's Infantry"
				disband = no #will not refund equipment and manpower
			}
			delete_unit_template_and_units = {
				division_template = "Winters's Knights"
				disband = no #will not refund equipment and manpower
			}
			if = {
				limit = { has_dlc = "Arms Against Tyranny" }
				calculate_company_of_winter_costs = yes
				hidden_effect = { remove_dynamic_modifier = { modifier = company_of_winter_payment } }
			}
			else_if = {
				limit = { has_idea = DOR_hire_company_of_winter }
				remove_ideas = DOR_hire_company_of_winter
			}
			if = {
				limit = { has_idea = DOR_whip_our_levies_into_shape_idea }
				remove_ideas = DOR_whip_our_levies_into_shape_idea
			}
		}
	}
}




