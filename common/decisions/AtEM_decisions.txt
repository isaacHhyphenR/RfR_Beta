celduin_trade_category = {
	upgrade_market = {
		icon = GFX_decision_upgrade_market
		fire_only_once = yes
		ai_will_do = { #ASAP
			factor = 10
		}
		days_mission_timeout = 100
		is_good = yes
		#days_remove = var:FROM.market_upgrade_time
		state_target = yes
		on_map_mode = map_only
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		cancel_trigger = { ##upgrade gets canceled if conquered
			NOT = { controls_state = FROM }
		}
		allowed = { always = no }
		available = { hidden_trigger = { always = no } }
		cancel_effect = {
			FROM = { clr_state_flag = constructing_market }
			subtract_from_variable = { market_upgrading_cost = global.market_upgrade_cost }
		}
		timeout_effect = {
			FROM = {
				add_building_construction = {
					type = market
					level = 1
					instant_build = yes
				}
				custom_effect_tooltip = resets_prosperity
				set_variable = { prosperity = 0 }
			}
			FROM = { clr_state_flag = constructing_market }
			subtract_from_variable = { market_upgrading_cost = global.market_upgrade_cost }
			random_other_country = { ##gain prosperity on their market from shipping tax
				limit = {
					has_idea = DOR_shipping_tax
					can_trade_with_ROOT = yes		
				}
				random_controlled_state = {
					limit = {
						market > 0
						check_variable = { prosperity < 100 }
					}
					add_5_prosperity = yes
				}
			}
		}
	}

	@luxury_cost = 999
	@luxury_cost_negative = -1000
	@wine_decision_days = 100
	
	auto_renew_luxury = {
		visible = { NOT = { has_country_flag = renew_luxury_decisions } }
		complete_effect = { set_country_flag = renew_luxury_decisions }
	}
	stop_auto_renew_luxury = {
		ai_will_do = { #ai should not auto renew
			factor = 1
		}
		visible = { has_country_flag = renew_luxury_decisions }
		complete_effect = { clr_country_flag = renew_luxury_decisions }
	}
	
	#############SPEND WINE
	wine_for_winelords = {
		icon = GFX_decision_winelords
		ai_will_do = {
			factor = 0
		}
		allowed = { original_tag = DOR }
		visible = { has_completed_focus = DOR_campaign_of_cordiality has_power_balance = { id = DOR_election_power_balance } }
		custom_cost_trigger = {
			has_equipment = { wine_equipment > @luxury_cost }
		}
		custom_cost_text = wine_decision_cost
		days_remove = @wine_decision_days
		modifier = {
			power_balance_daily = 0.001
		}
		complete_effect = { #cost
			hidden_effect = {
				add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			}
		}
		remove_effect = {
			hidden_effect = { #renews if possible
				if = { #try to renew
					limit = { has_country_flag = renew_luxury_decisions }
					if = { #renew if can afford
						limit = { has_equipment = { wine_equipment > @luxury_cost } }
						activate_decision = wine_for_stability
					}
					else = { #let the player know they can't renew
						news_event = rfr_news.79
					}
				}
			}
		}
	}
	
	@weeklyStab = 0.007
	wine_for_stability = {
		icon = GFX_decision_generic_stability
		ai_will_do = {
			factor = 1
			modifier = {
				has_stability < 0.75
				factor = 2
			}
			modifier = {
				has_stability < 0.5
				factor = 10
			}
			modifier = { #don't do if enough stability
				has_stability > 0.95
				factor = 0
			}
		}
		#allowed = { NOT = { original_tag = DOR } } ##they get special version
		custom_cost_trigger = {
			has_equipment = { wine_equipment > @luxury_cost }
		}
		custom_cost_text = wine_decision_cost
		days_remove = @wine_decision_days
		modifier = {
			stability_factor = 0.1
			#stability_weekly = @weeklyStab
		}
		complete_effect = { #cost
			hidden_effect = {
				add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			}
		}
		remove_effect = {
			hidden_effect = { #renews if possible
				if = { #try to renew
					limit = { has_country_flag = renew_luxury_decisions }
					if = { #renew if can afford
						limit = { has_equipment = { wine_equipment > @luxury_cost } }
						activate_decision = wine_for_stability
					}
					else = { #let the player know they can't renew
						news_event = rfr_news.79
					}
				}
			}
		}
	}
	# wine_for_stability_DOR = {
		# icon = GFX_decision_generic_stability
		# ai_will_do = {
			# factor = 1
			# modifier = {
				# has_stability < 0.75
				# factor = 2
			# }
			# modifier = {
				# has_stability < 0.5
				# factor = 10
			# }
			# modifier = { #don't do if enough stability
				# has_stability > 0.95
				# factor = 0
			# }
		# }
		# allowed = { original_tag = DOR } ##they get special version
		# custom_cost_trigger = {
			# has_equipment = { wine_equipment > @luxury_cost }
		# }
		# custom_cost_text = wine_decision_cost
		# days_remove = @wine_decision_days
		# modifier = {
			# stability_factor = 0.1
		# }
		# complete_effect = { #cost
			# hidden_effect = {
				# add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			# }
		# }
		# remove_effect = {
			# hidden_effect = { #renews if possible
				# if = { #try to renew
					# limit = { has_country_flag = renew_luxury_decisions }
					# if = { #renew if can afford
						# limit = { has_equipment = { wine_equipment > @luxury_cost } }
						# activate_decision = wine_for_stability
					# }
					# else = { #let the player know they can't renew
						# news_event = rfr_news.79
					# }
				# }
			# }
		# }
	# }
	
	wine_for_war_support = {
		icon = GFX_decision_generic_war_support
		ai_will_do = {
			factor = 1
			modifier = {
				has_war_support < 0.75
				OR = {
					has_war = yes
					has_government = melkorite
					has_government = conquest
				}
				factor = 2
			}
			modifier = {
				has_war_support < 0.5
				OR = {
					has_war = yes
					is_evil = yes
				}
				factor = 10
			}
			modifier = { #peaceful people don't really care
				has_war = no
				is_good = yes
				factor = 0
			}
			modifier = { #don't do if enough stability
				has_war_support > 0.95
				factor = 0
			}
		}
		#allowed = { NOT = { original_tag = DOR } } ##they get special version
		custom_cost_trigger = {
			has_equipment = { wine_equipment > @luxury_cost }
		}
		custom_cost_text = wine_decision_cost
		days_remove = @wine_decision_days
		modifier = {
			war_support_factor = 0.1
			#war_support_weekly = @weeklyStab
		}
		complete_effect = { #cost
			hidden_effect = {
				add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			}
		}
		remove_effect = {
			hidden_effect = { #renews if possible
				if = { #try to renew
					limit = { has_country_flag = renew_luxury_decisions }
					if = { #renew if can afford
						limit = { has_equipment = { wine_equipment > @luxury_cost } }
						activate_decision = wine_for_war_support
					}
					else = { #let the player know they can't renew
						news_event = rfr_news.79
					}
				}
			}
		}
	}
	# wine_for_war_support_DOR = {
		# icon = GFX_decision_generic_war_support
		# ai_will_do = {
			# factor = 1
			# modifier = {
				# has_war_support < 0.75
				# OR = {
					# has_war = yes
					# has_government = melkorite
					# has_government = conquest
				# }
				# factor = 2
			# }
			# modifier = {
				# has_war_support < 0.5
				# OR = {
					# has_war = yes
					# is_evil = yes
				# }
				# factor = 10
			# }
			# modifier = { #peaceful people don't really care
				# has_war = no
				# is_good = yes
				# factor = 0
			# }
			# modifier = { #don't do if enough stability
				# has_war_support > 0.95
				# factor = 0
			# }
		# }
		# allowed = { original_tag = DOR } ##they get special version
		# custom_cost_trigger = {
			# has_equipment = { wine_equipment > @luxury_cost }
		# }
		# custom_cost_text = wine_decision_cost
		# days_remove = @wine_decision_days
		# modifier = {
			# war_support_factor = 0.1
		# }
		# complete_effect = { #cost
			# hidden_effect = {
				# add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			# }
		# }
		# remove_effect = {
			# hidden_effect = { #renews if possible
				# if = { #try to renew
					# limit = { has_country_flag = renew_luxury_decisions }
					# if = { #renew if can afford
						# limit = { has_equipment = { wine_equipment > @luxury_cost } }
						# activate_decision = wine_for_war_support
					# }
					# else = { #let the player know they can't renew
						# news_event = rfr_news.79
					# }
				# }
			# }
		# }
	# }

	wine_for_consumer_goods = {
		icon = GFX_decision_generic_consumer_goods
		ai_will_do = {
			factor = 2
			modifier = { #don't do if not enough factories to likely make a difference
				num_of_factories < 15
				factor = 0
			}
		}
		custom_cost_trigger = {
			has_equipment = { wine_equipment > @luxury_cost }
		}
		custom_cost_text = wine_decision_cost
		days_remove = @wine_decision_days
		modifier = {
			consumer_goods_factor = -0.05
		}
		complete_effect = { #cost
			hidden_effect = {
				add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			}
		}
		remove_effect = {
			hidden_effect = { #renews if possible
				if = { #try to renew
					limit = { has_country_flag = renew_luxury_decisions }
					if = { #renew if can afford
						limit = { has_equipment = { wine_equipment > @luxury_cost } }
						activate_decision = wine_for_consumer_goods
					}
					else = { #let the player know they can't renew
						news_event = rfr_news.79
					}
				}
			}
		}
	}
	
	wine_for_morale = {
		icon = GFX_decision_generic_military
		ai_will_do = {
			factor = 1
			modifier = { #more likely if outmatched
				enemies_strength_ratio > 1
				factor = 2
			}
			modifier = { #more likely if outmatched
				enemies_strength_ratio > 1.25
				factor = 2
			}
			modifier = { #more likely if losing ground
				any_owned_state = { NOT = { is_controlled_by = ROOT } }
				factor = 3
			}
			modifier = { #no reason if at peace
				has_war = no
				factor = 0
			}
		}
		custom_cost_trigger = {
			has_equipment = { wine_equipment > @luxury_cost }
		}
		custom_cost_text = wine_decision_cost
		days_remove = @wine_decision_days
		modifier = {
			army_morale_factor = 0.25
		}
		complete_effect = { #cost
			hidden_effect = {
				add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			}
		}
		remove_effect = {
			hidden_effect = { #renews if possible
				if = { #try to renew
					limit = { has_country_flag = renew_luxury_decisions }
					if = { #renew if can afford
						limit = { has_equipment = { wine_equipment > @luxury_cost } }
						activate_decision = wine_for_morale
					}
					else = { #let the player know they can't renew
						news_event = rfr_news.79
					}
				}
			}
		}
	}
	
	wine_for_diplomacy = {
		icon = GFX_generic_befriend_decision
		ai_will_do = {
			factor = 0.25
			modifier = { #you don't need diplomacy!
				OR = {
					is_subject = yes
					AND = {
						has_war = yes
						is_in_faction = yes
					}
				}
				factor = 0
			}
		}
		custom_cost_trigger = {
			has_equipment = { wine_equipment > @luxury_cost }
		}
		custom_cost_text = wine_decision_cost
		days_remove = @wine_decision_days
		modifier = {
			improve_relations_maintain_cost_factor = -0.75
		}
		complete_effect = { #cost
			hidden_effect = {
				add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			}
		}
		remove_effect = {
			hidden_effect = { #renews if possible
				if = { #try to renew
					limit = { has_country_flag = renew_luxury_decisions }
					if = { #renew if can afford
						limit = { has_equipment = { wine_equipment > @luxury_cost } }
						activate_decision = wine_for_diplomacy
					}
					else = { #let the player know they can't renew
						news_event = rfr_news.79
					}
				}
			}
		}
	}
	
	wine_for_ideology_drift = {
		icon = GFX_decision_eng_blackshirt_speech
		ai_will_do = {
			factor = 0.25
			modifier = { #you don't need diplomacy!
				OR = {
					is_subject = yes
					AND = {
						has_war = yes
						is_in_faction = yes
					}
				}
				factor = 0
			}
		}
		custom_cost_trigger = {
			has_equipment = { wine_equipment > @luxury_cost }
		}
		custom_cost_text = wine_decision_cost
		days_remove = @wine_decision_days
		modifier = {
			drift_defence_factor = -0.25
		}
		complete_effect = { #cost
			hidden_effect = {
				add_equipment_to_stockpile = { type = wine_equipment amount = @luxury_cost_negative }
			}
		}
		remove_effect = {
			hidden_effect = { #renews if possible
				if = { #try to renew
					limit = { has_country_flag = renew_luxury_decisions }
					if = { #renew if can afford
						limit = { has_equipment = { wine_equipment > @luxury_cost } }
						activate_decision = wine_for_ideology_drift
					}
					else = { #let the player know they can't renew
						news_event = rfr_news.79
					}
				}
			}
		}
	}
}

colonisation_category = {
	uprising_in_colony = {
		icon = GFX_decision_revolt
		days_mission_timeout = 100
		is_good = no
		allowed = { always = no }
		state_target = yes
		available = {
			owns_state = FROM
		}
		complete_effect = {
			FROM = {
				add_resistance_target = {
					amount = -100
					tooltip = crushed_colonial_incursion
				}
				clr_state_flag = ongoing_incursion
			}
		}
		timeout_effect = {
			custom_effect_tooltip = destroy_colony_tooltip
			FROM = {
				owner = {
					if = { limit = { original_tag = WLD }
						recycle_colony_uprising = yes
					}
				}
				clr_state_flag = ongoing_incursion
				clr_country_flag = already_colonising
			}
		}
	}
	
	dominion_over_middle_earth = { ##complete your world conquest
		icon = GFX_decision_generic_nationalism
		ai_will_do = {
			factor = 1
		}
		allowed = { NOT = { original_tag = FOR original_tag = WLD } }
		visible = { num_of_controlled_states > 100 }
		available = {
			all_other_country = { OR = { original_tag = FOR original_tag = WLD } }
		}
		complete_effect = {
			every_state = {
				limit = {
					NOT = { is_controlled_by = ROOT }
				}
				transfer_state_to = ROOT
			}
		}
	}
	
	MOR_settle_wilderness = {
		icon = GFX_decision_infiltrate_state
		ai_will_do = {
			base = 0 #I only want them annexing old dagorlad
			modifier = {
				OR = {
					FROM = {
						OR = {
							state = 119 #brown lands
							state = 120 #undeeps
							state = 121 #dagorlad
							state = 123 #emen muil
							state = 124 #noman lands
							state = 333 #nindalf
							state = 334 #Dead marshes
							state = 335 #ashkirir
							state = 336 #tumcelon
						}
					}
					#they can go ham in late game, though
					date > 3022.1.1 
					AND = {
						date > 3020.1.1
						has_war_with_major = no
					}
				}
				add = 10
			}
		}
		allowed = { original_tag = MOR }
		visible = { has_completed_focus = MOR_the_eye_looks_west }
		custom_cost_text = MOR_settle_wilderness_cost
		custom_cost_trigger = { has_manpower > var:dagorlad_settlement_cost }
		days_remove = 7
		state_target = yes
		target_array = WLD:owned_states
		complete_effect = { #cost
			hidden_effect = {
				set_temp_variable = { MPcost = dagorlad_settlement_cost }
				multiply_temp_variable = { MPcost = -1 }
				add_manpower = MPcost
			}
		}
		cancel_trigger = {
			FROM = { NOT = { is_owned_by = WLD } }
		}
		target_trigger = {
			FROM = {
				is_owned_by = WLD
				any_neighbor_state = { is_core_of = ROOT is_controlled_by = ROOT }
			}
		}
		remove_effect = {
			FROM = {
				transfer_state_to = ROOT
				add_core_of = ROOT
				remove_core_of = WLD
				add_manpower = 100000
				add_colony_start_victory_points = yes
				add_colony_finished_victory_points = yes
				hidden_effect = { clear_undeveloped_colony_resources = yes }
			}
			add_named_threat = { 
				threat = 1
				name = MOR_dagorlad_tension_tooltip
			}
			#add_to_variable = { dagorlad_settlement_cost = dagorlad_settlement_cost_increase }
		}
	}
	begin_colonisation = {
		icon = GFX_decision_settle_territory
		fire_only_once = no
		ai_will_do = {
			factor = 0
			modifier = {
				num_of_civilian_factories_available_for_projects > 3
				add = 1
			}
			modifier = {
				has_war = yes
				factor = 0
			}
			modifier = { #guide the colonisation path
				OR = {
					AND = { #east bight
						FROM = { state = 94 }
						ROOT = { OR = { tag = GLD tag = WOD } }
					}
					AND = { #upper mirvan
						FROM = { region = 18 }
						ROOT = { OR = { tag = MIR } }
					}
					AND = { #lower mirvan
						FROM = { region = 83 }
						ROOT = { OR = { tag = MIR } }
					}
				}
				factor = 2
			}
		}
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		days_remove = 105
		state_target = yes
		target_array = WLD:owned_states
		#targets = { 94 109 111 119 120 121 122  124 307 333 334 335  336 } #123 emyn muil
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		visible = {
			NOT = { has_country_flag = already_colonising }
			has_tech = colony0
		}
			
		available = {
			NOT = { has_country_flag = already_colonising }
			num_of_civilian_factories_available_for_projects > 1
			has_manpower > 15000
		}
		target_trigger = {
			FROM = {
				is_owned_by = WLD
				any_neighbor_state = { is_core_of = ROOT is_controlled_by = ROOT  }
			}
		}
		cancel_trigger = { ##upgrade gets canceled if conquered
			NOT = {
				FROM = {
					is_owned_by = WLD
					any_neighbor_state = { is_owned_by = ROOT }
				}
			}
		}
		cancel_effect = { clr_country_flag = already_colonising }
		modifier = {
			civilian_factory_use = 2
			weekly_manpower = -1000
		}
		complete_effect = {
			set_country_flag = already_colonising
		}
		remove_effect = {
			FROM = {
				transfer_state_to = ROOT
				set_variable = { base_population = state_population } #so it can reset if revolt
				add_manpower = 15000
				add_colony_start_victory_points = yes
				set_variable = { integration_cost = state_population_k }
				divide_variable = { integration_cost = 3 }
				add_claim_by = ROOT
			}
			ROOT = { set_variable = { integration_cost = FROM.integration_cost } }
		}
	}
		
	annex_colony = {
		icon = GFX_decision_settle_territory
		fire_only_once = yes
		cost = var:integration_cost
		ai_will_do = {
			factor = 10
		}
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:core_states
		#targets = { 94 109 111 119 120 121 122 123 124 307 333 334 335 336 }
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		available = {
			custom_trigger_tooltip = { tooltip = colony_cost_scales_with_pop always = yes }
			FROM = {
				infrastructure > 0
				compliance > 70
				state_population_k > 150
			}
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
			}
		}
		remove_effect = {
			FROM = {
				add_core_of = ROOT
				remove_core_of = WLD
				upgrade_state_category = yes
				add_colony_finished_victory_points = yes
				clear_undeveloped_colony_resources = yes
				remove_dynamic_modifier = { modifier = wilderness_state }
			}
			clr_country_flag = already_colonising
		}
	}

	encourage_colonial_settlement = {
		icon = GFX_decision_generic_nationalism
		cost = 50
		days_remove = 100
		allowed = { NOT = { OR = { tag = FOR original_tag = WLD } } }
		visible = { any_controlled_state = { is_core_of = WLD } }
		modifier = {
			colony_growth_monthly_factor = 0.25
		}
	}
	@resourcePerDecision = 8
	@equipmentPerProspect = 49
	@equipmentPerProspectNegative = -50
	@prospectingRepeatable = yes #repeatable cause arrays & in case of colony destruction
	colony_food = { #increase food in a colony that can produce food
		icon = GFX_decision_food
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 1
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:food_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = food
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.food_state_array = THIS.id }
				add_to_array = { value = THIS.id array = WLD.developed_food_state_array }
			}
		}
	}
	colony_cloth = { #increase cloth in a colony that can produce cloth
		icon = GFX_decision_cloth
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 2
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:cloth_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = cloth
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.cloth_state_array = THIS.id }
				add_to_array = { value = THIS.id array = WLD.developed_cloth_state_array }
			}
		}
	}
	colony_wood = { #increase wood in a colony that can produce wood
		icon = GFX_decision_wood
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 5
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:wood_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = wood
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.wood_state_array = THIS.id }
				add_to_array = { value = THIS.id array = WLD.developed_wood_state_array }
			}
		}
	}
	colony_iron = { #increase iron in a colony that can produce iron
		icon = GFX_decision_steel
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 10
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:iron_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = iron
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.iron_state_array = THIS.id }
				add_to_array = { value = THIS.id array = WLD.developed_iron_state_array }
			}
		}
	}
	colony_mounts = { #increase mounts in a colony that can produce mounts
		icon = GFX_decision_mounts
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 5
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:mounts_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = mounts
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.mounts_state_array = THIS.id }
				add_to_array = { value = THIS.id array = WLD.developed_mounts_state_array }
			}
		}
	}
	#################################################TIER2
	colony_food2 = { #increase food in a colony that can produce food
		icon = GFX_decision_food
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 0
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:developed_food_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = food
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.developed_food_state_array = THIS.id }
				#add_to_array = { value = THIS.id array = WLD.developed_food_state_array }
			}
		}
	}
	colony_cloth2 = { #increase cloth in a colony that can produce cloth
		icon = GFX_decision_cloth
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 1
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:developed_cloth_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = cloth
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.developed_cloth_state_array = THIS.id }
				#add_to_array = { value = THIS.id array = WLD.developed_cloth_state_array }
			}
		}
	}
	colony_wood2 = { #increase wood in a colony that can produce wood
		icon = GFX_decision_wood
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 5
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:developed_wood_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = wood
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.developed_wood_state_array = THIS.id }
				#add_to_array = { value = THIS.id array = WLD.developed_wood_state_array }
			}
		}
	}
	colony_iron2 = { #increase iron in a colony that can produce iron
		icon = GFX_decision_steel
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 5
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:developed_iron_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = iron
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.developed_iron_state_array = THIS.id }
				#add_to_array = { value = THIS.id array = WLD.developed_iron_state_array }
			}
		}
	}
	colony_mounts2 = { #increase mounts in a colony that can produce mounts
		icon = GFX_decision_mounts
		fire_only_once = @prospectingRepeatable
		cost = 50
		ai_will_do = {
			factor = 1
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		custom_cost_trigger = { has_equipment = { engineering_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_prospect_decision_cost
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		state_target = yes
		target_array = WLD:developed_mounts_state_array
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
				is_core_of  = WLD
			}
		}
		available = { controls_state = FROM }
		available = { controls_state = FROM } #FROM = { NOT = { has_state_flag = already_prospecting } } }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = engineering_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resource = {
					type = mounts
					amount = @resourcePerDecision
				}
				clr_state_flag = already_prospecting
				remove_from_array = { WLD.developed_mounts_state_array = THIS.id }
				#add_to_array = { value = THIS.id array = WLD.developed_mounts_state_array }
			}
		}
	}
	
	
	colony_suppression = { #compliance
		icon = GFX_decision_generic_arrest
		on_map_mode = decision_view_only
		fire_only_once = yes
		ai_will_do = {
			factor = 2
			modifier = {
				has_war = yes
				factor = 0
			}
			modifier = {
				FROM = { compliance > 70 }
				factor = 0
			}
		}
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		custom_cost_trigger = { has_equipment = { suppression_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_suppression_decision_cost
		state_target = yes
		target_array = WLD:core_states
		#targets = { 94 109 111 119 120 121 122  124 307 333 334 335  336 } #123 emyn muil
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
			}
		}
		available = { controls_state = FROM }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = suppression_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_compliance = 25
			}
		}
	}
	colony_signals = { #resistance
		icon = GFX_decision_SWI_expand_covert_operations
		on_map_mode = decision_view_only
		fire_only_once = yes
		ai_will_do = {
			factor = 2
			modifier = {
				has_war = yes
				factor = 0
			}
			modifier = {
				FROM = { resistance < 35 }
				factor = 0
			}
		}
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		custom_cost_trigger = { has_equipment = { signals_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_signals_decision_cost
		state_target = yes
		target_array = WLD:core_states
		#targets = { 94 109 111 119 120 121 122  124 307 333 334 335  336 } #123 emyn muil
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
			}
		}
		available = { controls_state = FROM }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = signals_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_resistance_target = -25
			}
		}
	}
	colony_medical = { #population
		icon = GFX_decision_ITA_italian_east_africa
		on_map_mode = decision_view_only
		fire_only_once = yes
		ai_will_do = {
			factor = 2
			modifier = {
				has_war = yes
				factor = 0
			}
			modifier = {
				FROM = { resistance < 35 }
				factor = 0
			}
		}
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		custom_cost_trigger = { has_equipment = { medical_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_medical_decision_cost
		state_target = yes
		target_array = WLD:core_states
		#targets = { 94 109 111 119 120 121 122  124 307 333 334 335  336 } #123 emyn muil
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
			}
		}
		available = { controls_state = FROM }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = medical_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_manpower = 25000
			}
		}
	}
	colony_maintenance = { #state category
		icon = GFX_decision_generic_industry
		on_map_mode = decision_view_only
		fire_only_once = yes
		ai_will_do = {
			factor = 2
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		custom_cost_trigger = { has_equipment = { maintenance_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_maintenance_decision_cost
		state_target = yes
		target_array = WLD:core_states
		#targets = { 94 109 111 119 120 121 122  124 307 333 334 335  336 } #123 emyn muil
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_owned_by = ROOT
			}
		}
		available = { controls_state = FROM }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = maintenance_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				upgrade_state_category = yes
			}
		}
	}
	colony_motorized = { #supply node
		icon = GFX_decision_generic_trade
		on_map_mode = decision_view_only
		fire_only_once = yes
		ai_will_do = {
			factor = 2
			modifier = {
				has_war = yes
				factor = 0
			}
		}
		allowed = { NOT = { original_tag = FOR original_tag = WLD } } #wastelands can't colonise
		custom_cost_trigger = { has_equipment = { motorized_equipment > @equipmentPerProspect } }
		custom_cost_text = colony_motorized_decision_cost
		state_target = yes
		targets = { 94 109 111 119 120 121 122 307 335 336 } #only the states with VPs
		highlight_states = {
			highlight_state_targets = {
				state = FROM
			}
			highlight_color_while_active = 3
			highlight_color_before_active = 2
		}
		target_trigger = {
			FROM = {
				is_core_of = WLD
				is_owned_by = ROOT
			}
		}
		available = { controls_state = FROM }
		complete_effect = {
			hidden_effect = {
				add_equipment_to_stockpile = { type = motorized_equipment amount = @equipmentPerProspectNegative }
			}
		}
		remove_effect = {
			FROM = {
				add_colony_supply_node = yes
			}
		}
	}

	
	# DEBUG_colony_growth = {
		# visible = { is_debug = yes }
		# days_remove = 100
		# modifier = { colony_growth_monthly = 100000 }
	# }
}

DOR_spread_revolution_category = {
	@complianceForRepublic = 0.5
	establish_DAL_republic = {
		icon = GFX_decision_DAL_republic
		ai_will_do = {
			factor = 1
		}
		available = {
			core_compliance = {
				occupied_country_tag = DAL
				value > @complianceForRepublic
			}
		}
		fire_only_once = yes
		complete_effect = {
			create_dynamic_country = {
				original_tag = DAL
				set_cosmetic_tag = DAL_republic
				set_variable = { ROOT.DAL_republic_var = THIS }
				set_country_flag = revolutionary_republic
				every_country_with_original_tag = { ##this is civil war yall
					original_tag_to_check = DAL
					add_civil_war_target = PREV
				}
				if = {
					limit = { has_war_support < 0.5 }
					add_war_support = 0.1
				}
				if = {
					limit = { has_stability < 0.5 }
					add_stability = 0.1
				}
			}
			set_autonomy = { #sister republic
				target = var:DAL_republic_var
				autonomy_state = autonomy_sister_republic
				end_wars = no
				end_civil_wars = no
			}
			var:DAL_republic_var = { #transfers states
				every_core_state = {
					if = {
						limit = { is_controlled_by = ROOT }
						set_state_owner_to = PREV
					}
					set_state_province_controller = {
						limit = {
							OR = {
								tag = ROOT
								is_subject_of = ROOT
								is_in_faction_with = ROOT
							}
						}
						controller = PREV
					}
				}
			}
		}
	}
	debug_convert_all_republics = { ##gives all the 'base' nations their republican cosmetic tags
		visible = { is_debug = yes }
		complete_effect = {
			ART = {
				set_cosmetic_tag = arnor_republic
			}
			BER = {
				set_cosmetic_tag = BER_republic
			}
			DAI = {
				set_cosmetic_tag = DAI_republic
			}
			DAL = {
				set_cosmetic_tag = DAL_republic
			}
			DOR = {
				set_cosmetic_tag = DOR_republic
			}
			RUN = {
				set_cosmetic_tag = RUN_republic
			}
			RLM = {
				set_cosmetic_tag = steppe_republic
			}
			DUN = {
				set_cosmetic_tag = gwaithurium_republic
			}
			GON = {
				set_cosmetic_tag = GON_republic
			}
			HAR = {
				set_cosmetic_tag = HAR_republic
			}
			KND = {
				set_cosmetic_tag = KND_republic
			}
			UMB = {
				set_cosmetic_tag = UMB_republic
			}
			ROH = {
				set_cosmetic_tag = ROH_republic
			}
			RIN = {
				set_cosmetic_tag = RVN_republic
			}
			HTH = {
				set_cosmetic_tag = HTH_republic
			}
			HIL = {
				set_cosmetic_tag = HIL_republic
			}
		}
	}
}




