
#scripted_diplomatic_actions = {
#
#	action_key = { # will be used in most localizations
#	
#		# root is the initiator of action and this is the target country
#		allowed = { #if action is valid
#			always = yes
#		}
#		visible = { #if action is visible on gui
#			always = yes
#		}
#		selectable = { #if action is selectable on gui
#			always = yes
#		}
#
#		requires_acceptance = yes # if true the action will require acceptance of target country
#		cost = 10 # pp cost, can be zero
#		command_power = 10 # cp cost, can be zero
#
#		cost_string = loc_key # if you have a custom cost, use this loc to display it
#		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button
#
#		icon = 1 # icon frame to use in notification
#
#       #for effects/triggers/variables, root is the sender and this is receiver
#
#		# runs when the action is sent
#		on_sent_effect = {
#		}
#
#		# runs when the action is properly sent and accepted
#		complete_effect = {
#		}
#
#		# runs when the action is properly sent and rejected
#		reject_effect = {
#		}
#
#		# SEND POPUP CUSTOMIZATION
#		# use diplomatic_action as context in scripted gui
#		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action
#		reset_send_effect = { # if action has a send scripted gui, this effect will be used for clearing the state of gui (will run when player opens the scripted gui by sending the action or when ai proposes action
#			# clear action
#			if = {
#				limit = { 
#					root = {
#						is_ai = yes
#					}
#				}
#				# initialize for ai
#			}
#		}
#		can_be_sent = { # send button will be disabled if no
#			always = yes
#		}
#		send_description = loc_key_send # if there is no scripted gui, this desc will be used in send yes/no pop up
#
#
#		# RECEIVE POPUP CUSTOMIZATION
#		# use diplomatic_action as context in scripted gui
#		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
#		reset_receive_effect = {
#			# clear action
#			if = {
#				limit = { 
#					is_ai = yes
#				}
#				# change stuff for ai
#			}
#		}
#		can_be_accepted = { # accept button will be disabled if no
#			always = yes
#		}
#		receive_description = loc_key_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
#
#		
#		# PLAYER FEEDBACK ON ACCEPT/REJECT
#		accept_title = loc_key_accept #can be overridden to customize accepted/rejected pop ups for the sender
#		accept_description = loc_key_accept_desc
#		reject_title = loc_key_reject
#		reject_description = loc_key_reject_desc
#	
#		
#		# AI
#		# a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
#		ai_acceptance = {
#			condition = { # name is used for loc
#				base = 100
#			}
#		}
#
#		# ai_will_do to decide if AI should send this action or not
#		ai_desire = {
#			base = -1
#			modifier = {
#				ROOT = {
#					tag = ENG
#				}
#				tag = GER
#				add = 1000
#			}
#		}
#	}
#}




scripted_diplomatic_actions = {

	increase_tribal_trust = { # will be used in most localizations
	
		# root is the initiator of action and this is the target country
		allowed = { #if action is valid
			
		}
		visible = { #if action is visible on gui
			ROOT = { can_tribally_subjugate = yes }
			is_greater_enedwaith_tag = yes
		}
		selectable = { #if action is selectable on gui
			has_opinion = {
				target = ROOT
				value > 89
			}
			hidden_trigger = {
				ROOT = {
					set_temp_variable = { total_cost = 0 }
					calculate_tribal_trust_cost = yes
					add_to_temp_variable = { total_cost = -0.1 } ##so that the > works
					ROOT = { has_political_power > var:total_cost }
				}
			}
		}

		requires_acceptance = no # if true the action will require acceptance of target country
		#cost = 10 # pp cost, can be zero

		cost_string = increase_greater_enedwaith_trust_cost # if you have a custom cost, use this loc to display it
		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button

		icon = 1 # icon frame to use in notification

		#for effects/triggers/variables, root is the sender and this is receiver
		# runs when the action is properly sent and accepted
		complete_effect = {
			hidden_effect = { #dynamic cost
				if = { limit = { ROOT = { calculate_tribal_trust_cost = yes } }
					multiply_temp_variable = { total_cost = -1 }
					ROOT = { add_political_power = var:total_cost }
				}
			}
			add_opinion_modifier = {
				target = ROOT
				modifier = pulled_favours
			}
			ROOT = {
				increase_PREV_trust_towards_THIS = yes
			}
		}
		# ai_will_do to decide if AI should send this action or not
		@trustForNoDLCAnnexation = 4
		ai_desire = { #If they've gotten their opinion high enough, they should probably do it
			base = 5
			modifier = { #definately try for diplo target
				var:THIS.diplo_target = { tag = ROOT }
				factor = 100
			}
			modifier = {
				has_subject_autonomy_feature = no
				has_subject = ROOT
				check_variable = { THIS.enedwaith_tag_trust_towards_this^ROOT.tribal_array_position < @trustForNoDLCAnnexation }
				factor = 25
			}
				
			modifier = {##don't waste PP if you've already got them
				has_subject_autonomy_feature = yes
				ROOT = {
					OR = {
						PREV = {
							set_temp_variable = { total_acceptance = 0 }
							if = { limit = { calculate_blood_oath_submission_chance = yes }
								check_variable = { total_acceptance > 0.8 }
								#log = "[THIS.GetName] [PREV.GetName] [?total_acceptance]"
							}
						}
						is_subject_of = PREV
					}
				}
				factor = 0
			}
		}
	}
		
		
	begin_rhovanion_influence = { # will be used in most localizations 
	
		# root is the initiator of action and this is the target country
		allowed = { #if action is valid
		}
		visible = { #if action is visible on gui
			NOT = {
				is_in_array = {
					array = ROOT.influenced_rhovanion_tags
					value = THIS
				}
			}
			ROOT = {
				can_influence_rhovanion = yes
			}
			is_rhovanion_tag = yes
		}
		selectable = { #if action is selectable on gui
			has_opinion = {
				target = ROOT
				value > 0
			}
			NOT = { has_war_with = ROOT }
		}

		requires_acceptance = no # if true the action will require acceptance of target country
		cost = 10 # pp cost, can be zero

		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button

		icon = 1 # icon frame to use in notification

		#for effects/triggers/variables, root is the sender and this is receiver
		# runs when the action is properly sent and accepted
		complete_effect = {
			hidden_effect = { #Begin influencing
				add_to_array = {
					array = ROOT.influenced_rhovanion_tags
					value = THIS
				}
				#add the idea that costs you
				meta_effect = {
					text = {
						ROOT = {
							add_ideas = influence_[TAG]_cost
						}
					}
					TAG = "[THIS.GetTag]"
				}
			}
		}
		
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 10
			modifier = {
				has_opinion = {
					target = ROOT
					value < 25
				}
				add = -1000
			}
			modifier = {
				has_opinion = {
					target = ROOT
					value > 50
				}
				add = 2
			}
			modifier = {
				has_opinion = {
					target = ROOT
					value > 75
				}
				add = 5
			}
			modifier = {
				has_opinion = {
					target = ROOT
					value > 99
				}
				add = 5
			}
			modifier = { #try for someone who's already the same government
				has_government = ROOT
				add = 25
			}
			modifier = { #only influence neighbours
				NOT = { is_neighbor_of = ROOT }
				factor = 0
			}
			modifier = { #one at a time, unless you want more
				ROOT = {
					check_variable = { influenced_rhovanion_tags^num > 0 }
					NOT = { has_country_flag = focus_rhovanion }
				}
				factor = 0
			}
			modifier = { #Only go beyond subject if true evil OR you have a core/potential core
				is_subject_of = ROOT
				ROOT = {
					OR = {
						has_government = isolationism
						has_government = freedom
						has_government = opportunism
					}
				}
				NOT = {
					OR = {
						any_owned_state = {
							is_core_of = ROOT
						}
						#RIN & RUS
						AND = {
							ROOT = { original_tag = DOR }
							OR = {
								controls_state = 305
								controls_state = 240
							}
						}
					}
				}
				factor = 0
			}
			modifier = { #Don't bother if someone else got them puppeted
				is_subject = yes
				overlord = {
					NOT = { tag = ROOT }
				}
				factor = 0
			}
		}
	}
	
	end_rhovanion_influence = { # will be used in most localizations
	
		# root is the initiator of action and this is the target country
		allowed = { #if action is valid
		}
		visible = { #if action is visible on gui
			is_in_array = {
				array = ROOT.influenced_rhovanion_tags
				value = THIS
			}
		}

		requires_acceptance = no # if true the action will require acceptance of target country
		cost = 10 # pp cost, can be zero

		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button

		icon = 1 # icon frame to use in notification

		#for effects/triggers/variables, root is the sender and this is receiver
		# runs when the action is properly sent and accepted
		complete_effect = {
			hidden_effect = { #Begin influencing
				add_to_array = {
					array = ROOT.influenced_rhovanion_tags
					value = THIS
				}
				#add the idea that costs you
				meta_effect = {
					text = {
						ROOT = {
							add_ideas = influence_[TAG]_cost
						}
					}
					TAG = "[THIS.GetTag]"
				}
			}
		}
		
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
			modifier = { #Only go beyond subject if true evil OR you have a core/potential core
				is_subject_of = ROOT
				ROOT = {
					OR = {
						has_government = isolationism
						has_government = freedom
						has_government = opportunism
					}
				}
				NOT = {
					OR = {
						any_owned_state = {
							is_core_of = ROOT
						}
						#RIN & RUS
						AND = {
							ROOT = { original_tag = DOR }
							OR = {
								controls_state = 305
								controls_state = 240
							}
						}
					}
				}
				add = 100
			}
			modifier = { #don't bother if someone else got them puppeted
				is_subject = yes
				overlord = {
					NOT = { tag = ROOT }
				}
				add = 100
			}
		}
	}
	
	
	begin_promoting_lidless_eye = { # will be used in most localizations
	
		# root is the initiator of action and this is the target country
		visible = { #if action is visible on gui
			has_variable = melkorite_bop_index
			ROOT = { has_country_leader = { character = MOR_sauron ruling_only = yes } }
			NOT = { has_idea = sauron_influencing_bop_hidden }
		}

		requires_acceptance = no # if true the action will require acceptance of target country
		cost = 10 # pp cost, can be zero

		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button

		icon = 1 # icon frame to use in notification

		#for effects/triggers/variables, root is the sender and this is receiver
		# runs when the action is properly sent and accepted
		complete_effect = {
			hidden_effect = { #Begin influencing
				add_ideas = sauron_influencing_bop_hidden
				news_event = { id = rfr_news.142 hours = 1 }
				ROOT = {
					add_to_variable = { current_influencing_bop_cost = cost_to_influence_bop }
				}
			}
		}
		
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 25
			modifier = { #don't do if you need the PP
				ROOT = {
					political_power_daily < 0.5
					NOT = { has_completed_focus = MOR_the_lord_of_the_rings }
				}
				factor = 0
			}
			modifier = { #nothing else to spend on at this point
				ROOT = {
					political_power_daily > 0.02
					has_completed_focus = MOR_the_lord_of_the_rings
				}
				factor = 100
			}
			modifier = { #no need
				meta_trigger = {
					text = {
						is_power_balance_in_range = {
							id = melkorite_power_balance[ID]
							range = melkorite_lidless_eye_range3
						}
					}
					ID = "[?melkorite_bop_index]"
				}
				factor = 0
			}
			modifier = {
				has_autonomy_state = autonomy_shadow_slave
				factor = 0
			}
			modifier = {
				factor = 2
				is_major = yes
			}
			modifier = {
				factor = 2
				num_subjects > 0
			}
			modifier = {
				NOT = { is_subject_of = ROOT }
				factor = 2
			}
			modifier = { #care less about tiny tribes
				check_variable = { num_owned_states < 3 }
				factor = 0.5
			}
		}
	}
	stop_promoting_lidless_eye = { # will be used in most localizations
	
		# root is the initiator of action and this is the target country
		visible = { #if action is visible on gui
			ROOT = { has_country_leader = { character = MOR_sauron ruling_only = yes } }
			has_idea = sauron_influencing_bop_hidden
		}

		requires_acceptance = no # if true the action will require acceptance of target country

		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button

		icon = 1 # icon frame to use in notification
		cost = 0.01

		#for effects/triggers/variables, root is the sender and this is receiver
		# runs when the action is properly sent and accepted
		complete_effect = {
			hidden_effect = { #Begin influencing
				remove_ideas = sauron_influencing_bop_hidden
				ROOT = {
					subtract_from_variable = { current_influencing_bop_cost = cost_to_influence_bop }
				}
			}
		}
		
		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0
			modifier = { #no need
				meta_trigger = {
					text = {
						is_power_balance_in_range = {
							id = melkorite_power_balance[ID]
							range = melkorite_lidless_eye_range1
						}
					}
					ID = "[?melkorite_bop_index]"
				}
				add = 10
			}
			modifier = { #no need
				meta_trigger = {
					text = {
						is_power_balance_in_range = {
							id = melkorite_power_balance[ID]
							range = melkorite_lidless_eye_range2
						}
					}
					ID = "[?melkorite_bop_index]"
				}
				add = 50
			}
			modifier = { #nothing else to spend on at this point
				ROOT = {
					political_power_daily > 0.02
					has_completed_focus = MOR_the_lord_of_the_rings
				}
				factor = 0
			}
			modifier = { #no need
				meta_trigger = {
					text = {
						is_power_balance_in_range = {
							id = melkorite_power_balance[ID]
							range = melkorite_lidless_eye_range3
						}
					}
					ID = "[?melkorite_bop_index]"
				}
				add = 500
			}
			modifier = { #no need
				has_autonomy_state = autonomy_shadow_slave
				add = 500
			}
		}
	}
}
