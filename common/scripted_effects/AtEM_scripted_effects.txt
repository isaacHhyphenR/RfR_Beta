calculate_all_wine_production = { #call in FOR
	# clear_array = global.exporter_array
	# clear_array = global.exporter_ideology_array
	# clear_array = global.exporter_exported_array
	# clear_array = global.exporter_available_array
	every_state = { #state wine production
		limit = { check_variable = { modifier@wine_gain > 0 } }
		set_temp_variable = { wine_production = modifier@wine_gain }
		controller = {
			set_temp_variable = { wine_factor = PREV.modifier@wine_gain_factor }
			add_to_temp_variable = { wine_factor = modifier@wine_gain_factor }
			multiply_temp_variable = { PREV:wine_production = wine_factor }
			add_to_variable = { wine_produced = PREV:wine_production }
		}
	}
	every_country = { #add wine to stockpile/market
		limit = { #only compute for those actually gaining wine
			OR = {
				check_variable = { modifier@wine_gain_allowed > 0 }
				check_variable = { modifier@national_wine_gain > 0 }
				check_variable = { wine_imported > 0 }
			}
		}
		calculate_national_wine_production = yes
	}
}

calculate_national_wine_production = { #call in tag
	##compute export
	if = { #only export if you actually have a market to export from
		limit = { check_variable = { global.wine_exporter = THIS } }
		set_variable = { wine_export = wine_produced }
		multiply_variable = { wine_export = modifier@min_export }
		subtract_from_variable = { wine_produced = wine_export }
		set_variable = { wine_export_available = wine_export } #how much is still available for sale
		subtract_from_variable = { wine_export_available = wine_exported }
		#global variables since variable chaining doesn't work for display
		set_variable = { global.wine_export = wine_export }
		set_variable = { global.wine_export_available = wine_export_available }
		# ##add to exporter list
		# if = {
			# limit = { check_variable = { wine_export > 0 } }
			# # add_to_array = { value = THIS array = global.exporter_array }
			# # add_to_array = { value = ideology_index array = global.exporter_ideology_array }
			# # add_to_array = { value = wine_export array = global.exporter_exported_array }
			# # add_to_array = { value = wine_export_available array = global.exporter_available_array }
		# }
	}
	##compute off-map/import gain, which is not exported
	set_variable = { national_wine = modifier@national_wine_gain }
	multiply_variable = { national_wine = modifier@wine_gain_factor }
	add_to_variable = { wine_produced = national_wine }
	add_to_variable = { wine_produced = wine_imported }
	set_variable = { wine_production_SHOWCASE = wine_produced } #for tooltips
	##gain production
	add_equipment_to_stockpile = {
		type = wine_equipment_0
		amount = var:wine_produced
	}
	set_variable = { wine_available = wine_produced }
	set_variable = { wine_produced = 0 } #reset for tomorrow
}

daily_prosperity_gain = { #call in a state to gain it prosperity
	#base gain from trade
	set_variable = { passthroughGain = num_passthrough_routes }
	set_variable = { importGain = num_import_routes }
	set_variable = { exportGain = num_export_routes }
	multiply_variable = { passthroughGain = global.prosperity_per_passthrough }
	multiply_variable = { importGain = global.prosperity_per_import }
	multiply_variable = { exportGain = global.prosperity_per_export }
	set_variable = { base_prosperity_gain = passthroughGain }
	add_to_variable = { base_prosperity_gain = importGain }
	add_to_variable = { base_prosperity_gain = exportGain }
	
	#multiply by factors
	set_temp_variable = { factor = modifier@prosperity_gain_factor }
	add_to_temp_variable = { factor = controller.modifier@prosperity_gain_factor }
	add_to_temp_variable = { factor = 1 } #so it's not 0
	set_variable = { total_prosperity_gain = base_prosperity_gain }
	multiply_variable = { total_prosperity_gain = factor }
	
	##actually add the damn stuff
	add_to_variable = { prosperity = total_prosperity_gain }
	clamp_variable = {
		var = prosperity
		min = 0
		max = 100
	}
	if = {
		limit = { check_variable = { prosperity = 100 } market < 5 }
		set_variable = { market_display_frame = 1 }
	}
	else = {
		set_variable = { market_display_frame = 2 }
	}
	#calculate_market_upgrade_time = yes
}

calculate_market_upgrade_time = { #call in state. Mission refuses to read variable for some reason
	set_temp_variable = { factor = 1 }
	subtract_from_temp_variable = { factor = modifier@state_production_speed_buildings_factor }
	subtract_from_temp_variable = { factor = conroller.modifier@production_speed_buildings_factor }
	subtract_from_temp_variable = { factor = conroller.modifier@production_speed_market_factor }
	set_variable = { market_upgrade_time = 100 }
	multiply_variable = { market_upgrade_time = factor }
}

increase_trade_level = { #call in the tag of the seller with the buyer as ROOT
	##costs factory
	add_offsite_building = { type = industrial_complex level = 1 }
	##transfers wine towards you
	add_to_variable = { wine_exported = TEMP_export_size }
	subtract_from_variable = { wine_export_available = TEMP_export_size }
	set_variable = { global.wine_export_available = wine_export_available }
	custom_effect_tooltip = increase_wine_import_level_tooltip
	ROOT = {
		add_to_variable = { wine_imported = TEMP_export_size }
		add_to_variable = { wine_imported@PREV = TEMP_export_size }
		add_to_variable = { import_routes = 1 }
		hidden_effect = {
			if = { limit = { NOT = { has_dynamic_modifier = { modifier = import_cost } } }
				add_dynamic_modifier = { modifier = import_cost }
			}
		}
		custom_effect_tooltip = cost_civ_for_import
	}
	##adds prosperity to buyer & seller
	var:ROOT.capital = { add_to_variable = { num_import_routes = 1 } } #tell it to gain prosperity
	var:capital = { add_to_variable = { num_export_routes = 1 } } #tell it to gain prosperity
	#######adds prosperity to the markets in between
	set_temp_variable = { current_node = ROOT.capital }
	set_temp_variable = { nodes_left = current_node:node_index }
	subtract_from_temp_variable = { nodes_left = capital:node_index }
	
##########traces downstream path from buyer capital to seller capital
	if = {
		limit = { check_variable = { current_node:node_index < capital:node_index } }
		#Skip the buyer capital
		if = {
			limit = { check_variable = { current_node:downstream_node = null } }
			meta_effect = {
				text = {
					set_temp_variable = { current_node = current_node:downstream_towards_[DESTINATION] }
				}
				DESTINATION = "[?capital.GetID]"
			}
		}
		#or just go straight
		else = {
			set_temp_variable = { current_node = current_node:downstream_node }
		}
		multiply_temp_variable = { nodes_left = -1 }
		subtract_from_temp_variable = { nodes_left = 1 } #skip buyer and seller
#######################################LOOP THROUGH INTERMEDIATE NODES
		while_loop_effect = {
			limit = { check_variable = { nodes_left > 0 } }
			subtract_from_temp_variable = { nodes_left = 1 } #decrement
			var:current_node = { add_to_variable = { num_passthrough_routes = 1 } } #tell it to gain prosperity
			#pick which way to go in forks
			if = {
				limit = { check_variable = { current_node:downstream_node = null } }
				meta_effect = {
					text = {
						set_temp_variable = { current_node = current_node:downstream_towards_[DESTINATION] }
					}
					DESTINATION = "[?capital.GetID]"
				}
			}
			#or just go straight
			else = {
				set_temp_variable = { current_node = current_node:downstream_node }
			}
		}
	}
		
##########traces upstream path from buyer capital to seller capital
	else = {
		#Skip the buyer capital
		if = {
			limit = { check_variable = { current_node:upstream_node = null } }
			meta_effect = {
				text = {
					set_temp_variable = { current_node = current_node:upstream_towards_[DESTINATION] }
				}
				DESTINATION = "[?capital.GetID]"
			}
		}
		#or just go straight
		else = {
			set_temp_variable = { current_node = current_node:upstream_node }
		}
		subtract_from_temp_variable = { nodes_left = 1 } #skip buyer and seller
#######################################LOOP THROUGH INTERMEDIATE NODES
		while_loop_effect = {
			limit = { check_variable = { nodes_left > 0 } }
			subtract_from_temp_variable = { nodes_left = 1 } #decrement
			var:current_node = { add_to_variable = { num_passthrough_routes = 1 } } #tell it to gain prosperity
			#pick which way to go in forks
			if = {
				limit = { check_variable = { current_node:upstream_node = null } }
				meta_effect = {
					text = {
						set_temp_variable = { current_node = current_node:upstream_towards_[DESTINATION] }
					}
					DESTINATION = "[?capital.GetID]"
				}
			}
			#or just go straight
			else = {
				set_temp_variable = { current_node = current_node:upstream_node }
			}
		}
	}
}

decrease_trade_level = { #call in the tag of the seller with the buyer as ROOT
	##costs factory
	add_offsite_building = { type = industrial_complex level = -1 }
	##untransfers wine towards you
	custom_effect_tooltip = decrease_wine_import_level_tooltip
	subtract_from_variable = { wine_exported = TEMP_export_size }
	add_to_variable = { wine_export_available = TEMP_export_size }
	set_variable = { global.wine_export_available = wine_export_available }
	ROOT = {
		subtract_from_variable = { wine_imported = TEMP_export_size }
		subtract_from_variable = { wine_imported@PREV = TEMP_export_size }
		subtract_from_variable = { import_routes = 1 }
		custom_effect_tooltip = regain_cost_civ_for_import
	}
	##adds prosperity to buyer & seller
	var:ROOT.capital = { subtract_from_variable = { num_import_routes = 1 } } #tell it to gain prosperity
	var:capital = { subtract_from_variable = { num_export_routes = 1 } } #tell it to gain prosperity
	#######adds prosperity to the markets in between
	set_temp_variable = { current_node = ROOT.capital }
	set_temp_variable = { nodes_left = current_node:node_index }
	subtract_from_temp_variable = { nodes_left = capital:node_index }
	
##########traces downstream path from buyer capital to seller capital
	if = {
		limit = { check_variable = { current_node:node_index < capital:node_index } }
		#Skip the buyer capital
		if = {
			limit = { check_variable = { current_node:downstream_node = null } }
			meta_effect = {
				text = {
					set_temp_variable = { current_node = current_node:downstream_towards_[DESTINATION] }
				}
				DESTINATION = "[?capital.GetID]"
			}
		}
		#or just go straight
		else = {
			set_temp_variable = { current_node = current_node:downstream_node }
		}
		multiply_temp_variable = { nodes_left = -1 }
		subtract_from_temp_variable = { nodes_left = 1 } #skip buyer and seller
#######################################LOOP THROUGH INTERMEDIATE NODES
		while_loop_effect = {
			limit = { check_variable = { nodes_left > 0 } }
			subtract_from_temp_variable = { nodes_left = 1 } #decrement
			var:current_node = { subtract_from_variable = { num_passthrough_routes = 1 } } #tell it to gain prosperity
			#pick which way to go in forks
			if = {
				limit = { check_variable = { current_node:downstream_node = null } }
				meta_effect = {
					text = {
						set_temp_variable = { current_node = current_node:downstream_towards_[DESTINATION] }
					}
					DESTINATION = "[?capital.GetID]"
				}
			}
			#or just go straight
			else = {
				set_temp_variable = { current_node = current_node:downstream_node }
			}
		}
	}
		
##########traces upstream path from buyer capital to seller capital
	else = {
		#Skip the buyer capital
		if = {
			limit = { check_variable = { current_node:upstream_node = null } }
			meta_effect = {
				text = {
					set_temp_variable = { current_node = current_node:upstream_towards_[DESTINATION] }
				}
				DESTINATION = "[?capital.GetID]"
			}
		}
		#or just go straight
		else = {
			set_temp_variable = { current_node = current_node:upstream_node }
		}
		subtract_from_temp_variable = { nodes_left = 1 } #skip buyer and seller
#######################################LOOP THROUGH INTERMEDIATE NODES
		while_loop_effect = {
			limit = { check_variable = { nodes_left > 0 } }
			subtract_from_temp_variable = { nodes_left = 1 } #decrement
			var:current_node = { subtract_from_variable = { num_passthrough_routes = 1 } } #tell it to gain prosperity
			#pick which way to go in forks
			if = {
				limit = { check_variable = { current_node:upstream_node = null } }
				meta_effect = {
					text = {
						set_temp_variable = { current_node = current_node:upstream_towards_[DESTINATION] }
					}
					DESTINATION = "[?capital.GetID]"
				}
			}
			#or just go straight
			else = {
				set_temp_variable = { current_node = current_node:upstream_node }
			}
		}
	}
}


set_ideology_index = { #call in a tag
	if = { limit = { has_government = isolationism }
		set_variable = { ideology_index = 1 }
	}
	else_if = { limit = { has_government = freedom }
		set_variable = { ideology_index = 2 }
	}
	else_if = { limit = { has_government = opportunism }
		set_variable = { ideology_index = 3 }
	}
	else_if = { limit = { has_government = conquest }
		set_variable = { ideology_index = 4 }
	}
	else = {
		set_variable = { ideology_index = 5 }
	}
}