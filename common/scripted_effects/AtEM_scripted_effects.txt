calculate_all_wine_production = { #call in FOR
	# clear_array = global.exporter_array
	# clear_array = global.exporter_ideology_array
	# clear_array = global.exporter_exported_array
	# clear_array = global.exporter_available_array
	every_state = { #state wine production
		limit = { check_variable = { modifier@wine_gain > 0 } }
		set_temp_variable = { wine_production = modifier@wine_gain }
		controller = {
			set_temp_variable = { wine_factor = PREV.modifier@wine_gain_factor }
			add_to_temp_variable = { wine_factor = modifier@wine_gain_factor }
			multiply_temp_variable = { PREV:wine_production = wine_factor }
			add_to_variable = { wine_produced = PREV:wine_production }
		}
	}
	every_country = { #add wine to stockpile/market
		limit = { #only compute for those actually gaining wine
			OR = {
				check_variable = { modifier@wine_gain_allowed > 0 }
				check_variable = { modifier@national_wine_gain > 0 }
				check_variable = { wine_imported > 0 }
			}
		}
		calculate_national_wine_production = yes
	}
}

calculate_national_wine_production = { #call in tag
	##compute export
	if = { #only export if you actually have a market to export from
		limit = { check_variable = { global.wine_exporter = THIS } }
		set_variable = { wine_export = wine_produced }
		multiply_variable = { wine_export = modifier@min_export }
		subtract_from_variable = { wine_produced = wine_export }
		set_variable = { wine_export_available = wine_export } #how much is still available for sale
		subtract_from_variable = { wine_export_available = wine_exported }
		#global variables since variable chaining doesn't work for display
		set_variable = { global.wine_export = wine_export }
		set_variable = { global.wine_export_available = wine_export_available }
		# ##add to exporter list
		# if = {
			# limit = { check_variable = { wine_export > 0 } }
			# # add_to_array = { value = THIS array = global.exporter_array }
			# # add_to_array = { value = ideology_index array = global.exporter_ideology_array }
			# # add_to_array = { value = wine_export array = global.exporter_exported_array }
			# # add_to_array = { value = wine_export_available array = global.exporter_available_array }
		# }
	}
	##compute off-map/import gain, which is not exported
	set_variable = { national_wine = modifier@national_wine_gain }
	multiply_variable = { national_wine = modifier@wine_gain_factor }
	add_to_variable = { wine_produced = national_wine }
	add_to_variable = { wine_produced = wine_imported }
	set_variable = { wine_production_SHOWCASE = wine_produced } #for tooltips
	##gain production
	add_equipment_to_stockpile = {
		type = wine_equipment_0
		amount = var:wine_produced
	}
	set_variable = { wine_available = wine_produced }
	set_variable = { wine_produced = 0 } #reset for tomorrow
}

daily_prosperity_gain = { #call in a state to gain it prosperity
	#base gain from trade
	set_variable = { passthroughGain = num_passthrough_routes }
	set_variable = { importGain = num_import_routes }
	set_variable = { exportGain = num_export_routes }
	multiply_variable = { passthroughGain = global.prosperity_per_passthrough }
	multiply_variable = { importGain = global.prosperity_per_import }
	multiply_variable = { exportGain = global.prosperity_per_export }
	set_variable = { base_prosperity_gain = passthroughGain }
	add_to_variable = { base_prosperity_gain = importGain }
	add_to_variable = { base_prosperity_gain = exportGain }
	
	#multiply by factors
	set_temp_variable = { factor = modifier@prosperity_gain_factor }
	add_to_temp_variable = { factor = controller:modifier@prosperity_gain_factor }
	add_to_temp_variable = { factor = 1 } #so it's not 0
	set_variable = { total_prosperity_gain = base_prosperity_gain }
	multiply_variable = { total_prosperity_gain = factor }
	
	##actually add the damn stuff
	add_to_variable = { prosperity = total_prosperity_gain }
	clamp_variable = {
		var = prosperity
		min = 0
		max = 100
	}
	if = {
		limit = { check_variable = { prosperity = 100 } market < 5 }
		set_variable = { market_display_frame = 1 }
	}
	else = {
		set_variable = { market_display_frame = 2 }
	}
	#calculate_market_upgrade_time = yes
}

calculate_market_upgrade_time = { #call in state. Mission refuses to read variable for some reason
	set_temp_variable = { factor = 1 }
	subtract_from_temp_variable = { factor = modifier@state_production_speed_buildings_factor }
	subtract_from_temp_variable = { factor = conroller.modifier@production_speed_buildings_factor }
	subtract_from_temp_variable = { factor = conroller.modifier@production_speed_market_factor }
	set_variable = { market_upgrade_time = 100 }
	multiply_variable = { market_upgrade_time = factor }
}

increase_trade_level = { #call in the tag of the seller with the buyer as ROOT
	##costs factory
	add_offsite_building = { type = industrial_complex level = 1 }
	##transfers wine towards you
	add_to_variable = { wine_exported = TEMP_export_size }
	subtract_from_variable = { wine_export_available = TEMP_export_size }
	set_variable = { global.wine_export_available = wine_export_available }
	custom_effect_tooltip = increase_wine_import_level_tooltip
	ROOT = {
		add_to_variable = { wine_imported = TEMP_export_size }
		add_to_variable = { wine_imported@PREV = TEMP_export_size }
		add_to_variable = { import_routes = 1 }
		hidden_effect = {
			if = { limit = { NOT = { has_dynamic_modifier = { modifier = import_cost } } }
				add_dynamic_modifier = { modifier = import_cost }
			}
		}
		custom_effect_tooltip = cost_civ_for_import
	}
	##adds prosperity to buyer & seller
	var:ROOT.capital = { add_to_variable = { num_import_routes = 1 } } #tell it to gain prosperity
	var:capital = { add_to_variable = { num_export_routes = 1 } } #tell it to gain prosperity
	#######adds prosperity to the markets in between
	set_temp_variable = { current_node = ROOT.capital }
	set_temp_variable = { nodes_left = current_node:node_index }
	subtract_from_temp_variable = { nodes_left = capital:node_index }
	
##########traces downstream path from buyer capital to seller capital
	if = {
		limit = { check_variable = { current_node:node_index < capital:node_index } }
		#Skip the buyer capital
		if = {
			limit = { check_variable = { current_node:downstream_node = null } }
			meta_effect = {
				text = {
					set_temp_variable = { current_node = current_node:downstream_towards_[DESTINATION] }
				}
				DESTINATION = "[?capital.GetID]"
			}
		}
		#or just go straight
		else = {
			set_temp_variable = { current_node = current_node:downstream_node }
		}
		multiply_temp_variable = { nodes_left = -1 }
		subtract_from_temp_variable = { nodes_left = 1 } #skip buyer and seller
#######################################LOOP THROUGH INTERMEDIATE NODES
		while_loop_effect = {
			limit = { check_variable = { nodes_left > 0 } }
			subtract_from_temp_variable = { nodes_left = 1 } #decrement
			var:current_node = { add_to_variable = { num_passthrough_routes = 1 } } #tell it to gain prosperity
			#pick which way to go in forks
			if = {
				limit = { check_variable = { current_node:downstream_node = null } }
				meta_effect = {
					text = {
						set_temp_variable = { current_node = current_node:downstream_towards_[DESTINATION] }
					}
					DESTINATION = "[?capital.GetID]"
				}
			}
			#or just go straight
			else = {
				set_temp_variable = { current_node = current_node:downstream_node }
			}
		}
	}
		
##########traces upstream path from buyer capital to seller capital
	else = {
		#Skip the buyer capital
		if = {
			limit = { check_variable = { current_node:upstream_node = null } }
			meta_effect = {
				text = {
					set_temp_variable = { current_node = current_node:upstream_towards_[DESTINATION] }
				}
				DESTINATION = "[?capital.GetID]"
			}
		}
		#or just go straight
		else = {
			set_temp_variable = { current_node = current_node:upstream_node }
		}
		subtract_from_temp_variable = { nodes_left = 1 } #skip buyer and seller
#######################################LOOP THROUGH INTERMEDIATE NODES
		while_loop_effect = {
			limit = { check_variable = { nodes_left > 0 } }
			subtract_from_temp_variable = { nodes_left = 1 } #decrement
			var:current_node = { add_to_variable = { num_passthrough_routes = 1 } } #tell it to gain prosperity
			#pick which way to go in forks
			if = {
				limit = { check_variable = { current_node:upstream_node = null } }
				meta_effect = {
					text = {
						set_temp_variable = { current_node = current_node:upstream_towards_[DESTINATION] }
					}
					DESTINATION = "[?capital.GetID]"
				}
			}
			#or just go straight
			else = {
				set_temp_variable = { current_node = current_node:upstream_node }
			}
		}
	}
}

decrease_trade_level = { #call in the tag of the seller with the buyer as ROOT
	##costs factory
	add_offsite_building = { type = industrial_complex level = -1 }
	##untransfers wine towards you
	custom_effect_tooltip = decrease_wine_import_level_tooltip
	subtract_from_variable = { wine_exported = TEMP_export_size }
	add_to_variable = { wine_export_available = TEMP_export_size }
	set_variable = { global.wine_export_available = wine_export_available }
	ROOT = {
		subtract_from_variable = { wine_imported = TEMP_export_size }
		subtract_from_variable = { wine_imported@PREV = TEMP_export_size }
		subtract_from_variable = { import_routes = 1 }
		custom_effect_tooltip = regain_cost_civ_for_import
	}
	##adds prosperity to buyer & seller
	var:ROOT.capital = { subtract_from_variable = { num_import_routes = 1 } } #tell it to gain prosperity
	var:capital = { subtract_from_variable = { num_export_routes = 1 } } #tell it to gain prosperity
	#######adds prosperity to the markets in between
	set_temp_variable = { current_node = ROOT.capital }
	set_temp_variable = { nodes_left = current_node:node_index }
	subtract_from_temp_variable = { nodes_left = capital:node_index }
	
##########traces downstream path from buyer capital to seller capital
	if = {
		limit = { check_variable = { current_node:node_index < capital:node_index } }
		#Skip the buyer capital
		if = {
			limit = { check_variable = { current_node:downstream_node = null } }
			meta_effect = {
				text = {
					set_temp_variable = { current_node = current_node:downstream_towards_[DESTINATION] }
				}
				DESTINATION = "[?capital.GetID]"
			}
		}
		#or just go straight
		else = {
			set_temp_variable = { current_node = current_node:downstream_node }
		}
		multiply_temp_variable = { nodes_left = -1 }
		subtract_from_temp_variable = { nodes_left = 1 } #skip buyer and seller
#######################################LOOP THROUGH INTERMEDIATE NODES
		while_loop_effect = {
			limit = { check_variable = { nodes_left > 0 } }
			subtract_from_temp_variable = { nodes_left = 1 } #decrement
			var:current_node = { subtract_from_variable = { num_passthrough_routes = 1 } } #tell it to gain prosperity
			#pick which way to go in forks
			if = {
				limit = { check_variable = { current_node:downstream_node = null } }
				meta_effect = {
					text = {
						set_temp_variable = { current_node = current_node:downstream_towards_[DESTINATION] }
					}
					DESTINATION = "[?capital.GetID]"
				}
			}
			#or just go straight
			else = {
				set_temp_variable = { current_node = current_node:downstream_node }
			}
		}
	}
		
##########traces upstream path from buyer capital to seller capital
	else = {
		#Skip the buyer capital
		if = {
			limit = { check_variable = { current_node:upstream_node = null } }
			meta_effect = {
				text = {
					set_temp_variable = { current_node = current_node:upstream_towards_[DESTINATION] }
				}
				DESTINATION = "[?capital.GetID]"
			}
		}
		#or just go straight
		else = {
			set_temp_variable = { current_node = current_node:upstream_node }
		}
		subtract_from_temp_variable = { nodes_left = 1 } #skip buyer and seller
#######################################LOOP THROUGH INTERMEDIATE NODES
		while_loop_effect = {
			limit = { check_variable = { nodes_left > 0 } }
			subtract_from_temp_variable = { nodes_left = 1 } #decrement
			var:current_node = { subtract_from_variable = { num_passthrough_routes = 1 } } #tell it to gain prosperity
			#pick which way to go in forks
			if = {
				limit = { check_variable = { current_node:upstream_node = null } }
				meta_effect = {
					text = {
						set_temp_variable = { current_node = current_node:upstream_towards_[DESTINATION] }
					}
					DESTINATION = "[?capital.GetID]"
				}
			}
			#or just go straight
			else = {
				set_temp_variable = { current_node = current_node:upstream_node }
			}
		}
	}
}

set_ideology_index = { #call in a tag
	if = { limit = { has_government = isolationism }
		set_variable = { ideology_index = 1 }
	}
	else_if = { limit = { has_government = freedom }
		set_variable = { ideology_index = 2 }
	}
	else_if = { limit = { has_government = opportunism }
		set_variable = { ideology_index = 3 }
	}
	else_if = { limit = { has_government = conquest }
		set_variable = { ideology_index = 4 }
	}
	else = {
		set_variable = { ideology_index = 5 }
	}
}

add_5_prosperity = {
	add_to_variable = { prosperity = 5 }
	custom_effect_tooltip = add_5_prosperity
}
add_10_prosperity = {
	add_to_variable = { prosperity = 10 }
	custom_effect_tooltip = add_10_prosperity
}
add_15_prosperity = {
	add_to_variable = { prosperity = 15 }
	custom_effect_tooltip = add_15_prosperity
}
add_20_prosperity = {
	add_to_variable = { prosperity = 20 }
	custom_effect_tooltip = add_20_prosperity
}
add_25_prosperity = {
	add_to_variable = { prosperity = 25 }
	custom_effect_tooltip = add_25_prosperity
}
add_30_prosperity = {
	add_to_variable = { prosperity = 30 }
	custom_effect_tooltip = add_30_prosperity
}
add_50_prosperity = {
	add_to_variable = { prosperity = 50 }
	custom_effect_tooltip = add_50_prosperity
}

############################################################################################COLONIES
clear_undeveloped_colony_resources = { #call in a state to remove any 1 size resources
	custom_effect_tooltip = clear_undeveloped_colony_resources_tooltip
	if = {
		limit = {
			has_resources_amount = { resource = food amount > 0 delivered = no }
			has_resources_amount = { resource = food amount < 2 delivered = no }
		}
		add_resource = { type = food amount = -1 }
	}
	if = {
		limit = {
			has_resources_amount = { resource = cloth amount > 0 delivered = no }
			has_resources_amount = { resource = cloth amount < 2 delivered = no }
		}
		add_resource = { type = cloth amount = -1 }
	}
	if = {
		limit = {
			has_resources_amount = { resource = iron amount > 0 delivered = no }
			has_resources_amount = { resource = iron amount < 2 delivered = no }
		}
		add_resource = { type = iron amount = -1 }
	}
	if = {
		limit = {
			has_resources_amount = { resource = wood amount > 0 delivered = no }
			has_resources_amount = { resource = wood amount < 2 delivered = no }
		}
		add_resource = { type = wood amount = -1 }
	}
	if = {
		limit = {
			has_resources_amount = { resource = mounts amount > 0 delivered = no }
			has_resources_amount = { resource = mounts amount < 2 delivered = no }
		}
		add_resource = { type = mounts amount = -1 }
	}
}

reset_colony_resources = { #call in a state to rest all developed resources to 1
	custom_effect_tooltip = reset_colony_resources_tooltip
	if = {
		limit = {
			has_resources_amount = { resource = food amount > 8 delivered = no }
		}
		add_resource = { type = food amount = -8 }
	}
	if = {
		limit = {
			has_resources_amount = { resource = cloth amount > 8 delivered = no }
		}
		add_resource = { type = cloth amount = -8 }
	}
	if = {
		limit = {
			has_resources_amount = { resource = iron amount > 8 delivered = no }
		}
		add_resource = { type = iron amount = -8 }
	}
	if = {
		limit = {
			has_resources_amount = { resource = wood amount > 8 delivered = no }
		}
		add_resource = { type = wood amount = -8 }
	}
	if = {
		limit = {
			has_resources_amount = { resource = mounts amount > 8 delivered = no }
		}
		add_resource = { type = mounts amount = -8 }
	}
}

add_colony_start_victory_points = { #call in a state to add its first victory point
	if = { limit = { state = 18 } #talath muil
		add_victory_points = {
			province = 5285
			value = 1
		}
	}
	else_if = { limit = { state = 19 } #duneriador
		add_victory_points = {
			province = 1894
			value = 1
		}
	}
	else_if = { limit = { state = 47 } #rachond
		add_victory_points = {
			province = 118
			value = 1
		}
	}
	else_if = { limit = { state = 94 } #east bight
		add_victory_points = {
			province = 4312
			value = 1
		}
	}
	else_if = { limit = { state = 109 } #medelmarna
		add_victory_points = {
			province = 1301
			value = 1
		}
	}
	else_if = { limit = { state = 111 } #Anthardor
		add_victory_points = {
			province = 1921
			value = 1
		}
	}
	else_if = { limit = { state = 119 } #Brown Lands
		add_victory_points = {
			province = 3525
			value = 1
		}
	}
	else_if = { limit = { state = 120 } #Undeeps
		add_victory_points = {
			province = 6492
			value = 1
		}
	}
	else_if = { limit = { state = 121 } #Dagorlad
		add_victory_points = {
			province = 6622
			value = 1
		}
	}
	else_if = { limit = { state = 122 } #Talath Harroch
		add_victory_points = {
			province = 3260
			value = 1
		}
	}
	else_if = { limit = { state = 307 } #Anwuning
		add_victory_points = {
			province = 3479
			value = 1
		}
	}
	else_if = { limit = { state = 335 } #ashkirir
		add_victory_points = {
			province = 2915
			value = 1
		}
	}
	else_if = { limit = { state = 336 } #tumcelon
		add_victory_points = {
			province = 6562
			value = 1
		}
	}
}

add_colony_finished_victory_points = { #call in a state to add it's victory points
	if = { limit = { state = 18 } #talath muil
		add_victory_points = {
			province = 5285
			value = 1
		}
		add_victory_points = {
			province = 178
			value = 1
		}
	}
	else_if = { limit = { state = 19 } #duneriador
		# add_victory_points = {
			# province = 1894
			# value = 1
		# }
		add_victory_points = {
			province = 4314
			value = 1
		}
		add_victory_points = {
			province = 4586
			value = 1
		}
	}
	else_if = { limit = { state = 47 } #rachond
		add_victory_points = {
			province = 118
			value = 1
		}
	}
	else_if = { limit = { state = 94 } #east bight
		# add_victory_points = {
			# province = 4312
			# value = 1
		# }
		add_victory_points = {
			province = 3272
			value = 1
		}
		add_victory_points = {
			province = 2569
			value = 1
		}
	}
	else_if = { limit = { state = 109 } #medelmarna
		add_victory_points = {
			province = 1301
			value = 1
		}
		add_victory_points = {
			province = 2270
			value = 1
		}
	}
	else_if = { limit = { state = 111 } #Anthardor
		add_victory_points = {
			province = 1921
			value = 1
		}
		add_victory_points = {
			province = 2651
			value = 1
		}
	}
	else_if = { limit = { state = 119 } #Brown Lands
		add_victory_points = {
			province = 3525
			value = 1
		}
	}
	else_if = { limit = { state = 120 } #Undeeps
		# add_victory_points = {
			# province = 6492
			# value = 1
		# }
		add_victory_points = {
			province = 3046
			value = 1
		}
		add_victory_points = {
			province = 5158
			value = 1
		}
	}
	else_if = { limit = { state = 121 } #Dagorlad
		# add_victory_points = {
			# province = 6622
			# value = 1
		# }
		add_victory_points = {
			province = 6743
			value = 1
		}
		add_victory_points = {
			province = 6842
			value = 1
		}
	}
	else_if = { limit = { state = 122 } #Talath Harroch
		add_victory_points = {
			province = 3260
			value = 1
		}
		add_victory_points = {
			province = 6578
			value = 1
		}
	}
	else_if = { limit = { state = 307 } #Anwuning
		add_victory_points = {
			province = 3479
			value = 1
		}
		add_victory_points = {
			province = 3619
			value = 1
		}
	}
	else_if = { limit = { state = 335 } #ashkirir
		add_victory_points = {
			province = 2915
			value = 1
		}
		add_victory_points = {
			province = 75
			value = 1
		}
	}
	else_if = { limit = { state = 336 } #tumcelon
		add_victory_points = {
			province = 6562
			value = 1
		}
		add_victory_points = {
			province = 4610
			value = 1
		}
	}
}

remove_colony_victory_points = { #call in a state to clear its victory points
	if = { limit = { state = 94 } #east bight
		set_victory_points = {
			province = 4312
			value = 0
		}
		set_victory_points = {
			province = 3272
			value = 0
		}
		set_victory_points = {
			province = 2569
			value = 0
		}
	}
	else_if = { limit = { state = 109 } #medelmarna
		set_victory_points = {
			province = 1301
			value = 0
		}
		set_victory_points = {
			province = 2270
			value = 0
		}
	}
	else_if = { limit = { state = 111 } #Anthardor
		set_victory_points = {
			province = 1921
			value = 0
		}
		set_victory_points = {
			province = 2651
			value = 0
		}
	}
	else_if = { limit = { state = 119 } #Brown Lands
		set_victory_points = {
			province = 3525
			value = 0
		}
	}
	else_if = { limit = { state = 120 } #Undeeps
		set_victory_points = {
			province = 6492
			value = 0
		}
		set_victory_points = {
			province = 3046
			value = 0
		}
		set_victory_points = {
			province = 5158
			value = 0
		}
	}
	else_if = { limit = { state = 121 } #Dagorlad
		set_victory_points = {
			province = 6622
			value = 0
		}
		set_victory_points = {
			province = 6743
			value = 0
		}
		set_victory_points = {
			province = 6842
			value = 0
		}
	}
	else_if = { limit = { state = 122 } #Talath Harroch
		set_victory_points = {
			province = 3260
			value = 0
		}
		set_victory_points = {
			province = 6578
			value = 0
		}
	}
	else_if = { limit = { state = 307 } #Anwuning
		set_victory_points = {
			province = 3479
			value = 0
		}
		set_victory_points = {
			province = 3619
			value = 0
		}
	}
	else_if = { limit = { state = 335 } #ashkirir
		set_victory_points = {
			province = 2915
			value = 0
		}
		set_victory_points = {
			province = 75
			value = 0
		}
	}
	else_if = { limit = { state = 336 } #tumcelon
		set_victory_points = {
			province = 6562
			value = 0
		}
		set_victory_points = {
			province = 4610
			value = 0
		}
	}
}

add_colony_supply_node = { #call in a state to add a supply node to the capital
	if = { limit = { state = 18 } #talath muil
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 5285
		}
	}
	else_if = { limit = { state = 19 } #duneriador
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 1894
		}
	}
	else_if = { limit = { state = 47 } #rachond
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 118
		}
	}
	else_if = { limit = { state = 94 } #east bight
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 4312
		}
	}
	else_if = { limit = { state = 109 } #medelmarna
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 1301
		}
	}
	else_if = { limit = { state = 111 } #Anthardor
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 1921
		}
	}
	else_if = { limit = { state = 119 } #Brown Lands
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 3525
		}
	}
	else_if = { limit = { state = 120 } #Undeeps
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 6492
		}
	}
	else_if = { limit = { state = 121 } #Dagorlad
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 6622
		}
	}
	else_if = { limit = { state = 122 } #Talath Harroch
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 3260
		}
	}
	else_if = { limit = { state = 307 } #Anwuning
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 3479
		}
	}
	else_if = { limit = { state = 335 } #ashkirir
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 2915
		}
	}
	else_if = { limit = { state = 336 } #tumcelon
		add_building_construction = {
			type = supply_node
			level = 1
			instant_build = yes
			province = 6562
		}
	}
}

recycle_colony_uprising = { ##call in a colony uprising tag to reset the colony
	hidden_effect = {
		##destroy the colony
		every_owned_state = {
			limit = { has_state_flag = ongoing_incursion }
			remove_colony_victory_points = yes
			reset_colony_resources = yes #call twice in case of double development
			reset_colony_resources = yes
			set_temp_variable = { pop = state_population }
			subtract_from_temp_variable = { pop = base_population }
			multiply_temp_variable = { pop = -1 }
			add_manpower = pop
			set_building_level = {
				type = infrastructure
				level = 0
			}
			set_state_category = wasteland
			clr_state_flag = ongoing_incursion
		}
		##recycle the leader
		if = {
			limit = { has_character = WLD_wilderness1 }
			WLD_wilderness1 = { set_nationality = WLD }
		}
		else_if = {
			limit = { has_character = WLD_wilderness2 }
			WLD_wilderness2 = { set_nationality = WLD }
		}
		else_if = {
			limit = { has_character = WLD_wilderness3 }
			WLD_wilderness3 = { set_nationality = WLD }
		}
		else_if = {
			limit = { has_character = WLD_wilderness4 }
			WLD_wilderness4 = { set_nationality = WLD }
		}
		else_if = {
			limit = { has_character = WLD_wilderness5 }
			WLD_wilderness5 = { set_nationality = WLD }
		}
		###finally, end the rebellion
		every_core_state = {
			remove_core_of = PREV
		}
		WLD = {
			annex_country = {
				target = PREV
				transfer_troops = no
			}
		}
	}
}

promote_wilderness_leader = { ##call in the leader of wilderness to promote to actual leader
	promote_character = clanship
	promote_character = feudalism
	promote_character = tribalism
	promote_character = autocracy
	promote_character = shadow_worship
}

############################################################################################DORWINION
@advisorPowerLeft = -0.05
@advisorPowerRight = 0.05
koldana_advisor_effect = { ##adds BoP
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerRight
			tooltip_side = DOR_winelords_side
		}
	}
	else_if = {
		limit = { has_power_balance = { id = DOR_winelords_power_balance } }
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @advisorPowerLeft
			tooltip_side = DOR_koldana_side
		}
	}
	add_to_variable = { koldana_advisors = 1 }
}
koldana_advisor_effect_remove = { ##removes BoP
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerLeft
			tooltip_side = DOR_great_merchants_side
		}
	}
	else_if = {
		limit = { has_power_balance = { id = DOR_winelords_power_balance } }
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @advisorPowerRight
			tooltip_side = DOR_vierling_side
		}
	}
	add_to_variable = { koldana_advisors = -1 }
}

vierling_advisor_effect = { ##adds BoP
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerRight
			tooltip_side = DOR_winelords_side
		}
	}
	else_if = {
		limit = { has_power_balance = { id = DOR_winelords_power_balance } }
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @advisorPowerRight
			tooltip_side = DOR_vierling_side
		}
	}
	add_to_variable = { vierling_advisors = 1 }
}
vierling_advisor_effect_remove = { ##removes BoP
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerLeft
			tooltip_side = DOR_great_merchants_side
		}
	}
	else_if = {
		limit = { has_power_balance = { id = DOR_winelords_power_balance } }
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @advisorPowerLeft
			tooltip_side = DOR_koldana_side
		}
	}
	add_to_variable = { vierling_advisors = -1 }
}

merchant_house_advisor_effect = { ##adds BoP
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerLeft
			tooltip_side = DOR_great_merchants_side
		}
	}
	else_if = {
		limit = { has_power_balance = { id = DOR_great_merchants_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerRight
			tooltip_side = DOR_merchant_houses_side
		}
	}
	add_to_variable = { merchant_house_advisors = 1 }
}
merchant_house_advisor_effect_remove = { ##removes BoP
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerRight
			tooltip_side = DOR_winelords_side
		}
	}
	else_if = {
		limit = { has_power_balance = { id = DOR_great_merchants_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerLeft
			tooltip_side = DOR_burghers_side
		}
	}
	add_to_variable = { merchant_house_advisors = -1 }
}

burgher_advisor_effect = { ##adds BoP
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerLeft
			tooltip_side = DOR_winelords_side
		}
	}
	else_if = {
		limit = { has_power_balance = { id = DOR_great_merchants_power_balance } }
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @advisorPowerLeft
			tooltip_side = DOR_merchant_houses_side
		}
	}
	add_to_variable = { burgher_advisors = 1 }
}
burgher_advisor_effect_remove = { ##removes BoP
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @advisorPowerRight
			tooltip_side = DOR_great_merchants_side
		}
	}
	else_if = {
		limit = { has_power_balance = { id = DOR_great_merchants_power_balance } }
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @advisorPowerRight
			tooltip_side = DOR_burghers_side
		}
	}
	add_to_variable = { burgher_advisors = -1 }
}

DOR_winelords_BOP_initial_advisors = { ##variables in the event don't work :/
	every_character = {
		if = {
			limit = {
				has_character_flag = koldana_supporter
				is_activated_advisor = yes
			}
			ROOT = { koldana_advisor_effect = yes }
		}
		else_if = {
			limit = {
				has_character_flag = vierling_supporter
				is_activated_advisor = yes
			}
			ROOT = { vierling_advisor_effect = yes }
		}
	}
}
DOR_great_merchabts_BOP_initial_advisors = { ##variables in the event don't work :/
	every_character = {
		if = {
			limit = {
				has_character_flag = burghers_supporter
				is_activated_advisor = yes
			}
			ROOT = { burgher_advisor_effect = yes }
		}
		else_if = {
			limit = {
				has_character_flag = merchant_houses_supporter
				is_activated_advisor = yes
			}
			ROOT = { merchant_house_advisor_effect = yes }
		}
	}
}

winelords_win_election_effect = {
	DOR_bladorthin_koldana = {
		if = { ##in case you leveled him up, upgrade his ruler trait
			limit = { has_trait = army_chief_organizational_2 }
			swap_country_leader_traits = {
				remove = army_chief_organizational_1
				add = army_chief_organizational_2
				ideology = elective_monarchy_opportunism
			}
		}
		else_if = { ##in case you leveled him up, upgrade his ruler trait
			limit = { has_trait = army_chief_organizational_3 }
			swap_country_leader_traits = {
				remove = army_chief_organizational_1
				add = army_chief_organizational_3
				ideology = elective_monarchy_opportunism
			}
		}
		remove_advisor_role = {
		  slot = political_advisor
		}
		remove_advisor_role = {
		  slot = army_chief
		}
	}
	set_politics = {
		ruling_party = opportunism
	}
	add_popularity = {
		ideology = opportunism
		popularity = 0.1
	}
	if = { #reward PP
		limit = { has_country_flag = supporting_winelords }
		add_political_power = 100
	}
	set_country_flag = elected_winelord
	remove_power_balance = {
		id = DOR_election_power_balance
	}

	set_power_balance = {
		id = DOR_winelords_power_balance
		left_side = DOR_koldana_side
		right_side = DOR_vierling_side
		set_default = yes
	}
	if = { ##BoP from focuses
		limit = { has_completed_focus = DOR_rally_support_for_bladorthin }
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = -0.1
		}
	}
	else_if = {
		limit = { has_completed_focus = DOR_rally_support_for_vidumarh }
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = 0.1
		}
	}
	#figure out how much BoP from advisors
	DOR_winelords_BOP_initial_advisors = yes
}
great_merchants_win_election_effect = {
	DOR_bergholda_aldiana = {
		remove_advisor_role = {
		  slot = political_advisor
		}
		remove_advisor_role = {
		  slot = theorist
		}
	}
	add_popularity = {
		ideology = isolationism
		popularity = 0.1
	}
	if = { #reward PP
		limit = { has_country_flag = supporting_great_merchants }
		add_political_power = 100
	}
	set_country_flag = elected_great_merchant
	remove_power_balance = {
		id = DOR_election_power_balance
	}
	set_power_balance = {
		id = DOR_great_merchants_power_balance
		left_side = DOR_burghers_side
		right_side = DOR_merchant_houses_side
		set_default = yes
	}
	#figure out how much BoP from advisors
	set_temp_variable = { advisor_bop = merchant_house_advisors }
	subtract_from_temp_variable = { advisor_bop = burgher_advisors }
	multiply_temp_variable = { advisor_bop = 0.05 }
	meta_effect = {
		text = {
			add_power_balance_value = {
				id = DOR_great_merchants_power_balance
				value = BOP
			}
		}
		BOP = "[?advisor_bop]"
	}
}

bergholda_trade_effect = { ##reduces cost to trade
	hidden_effect = {
		every_possible_country = {
			add_ideas = bergholda_hidden_trade_modifier
		}
	}
}
bergholda_trade_effect_remove = { ##increases cost to trade
	hidden_effect = {
		every_possible_country = {
			remove_ideas = bergholda_hidden_trade_modifier
		}
	}
}

@focusPowerLeft = -0.05
@focusPowerRight = 0.05
@focusPowerLeftMed = -0.10
@focusPowerRightMed = 0.10
@focusPowerLeftBig = -0.20
@focusPowerRightBig = 0.20
@focusPowerLeftLarge = -0.30
@focusPowerRightLarge = 0.30
great_merchants_focus_effect = {
	if = {
		limit = { has_power_balance = { id = DOR_election_power_balance } }
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @focusPowerLeft
			tooltip_side = DOR_great_merchants_side
		}
	}
}
great_merchants_focus_effect_med = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_election_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @focusPowerLeftMed
			tooltip_side = DOR_great_merchants_side
		}
	}
}
great_merchants_focus_effect_big = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_election_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @focusPowerLeftBig
			tooltip_side = DOR_great_merchants_side
		}
	}
}
great_merchants_focus_effect_large = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_election_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @focusPowerLeftLarge
			tooltip_side = DOR_great_merchants_side
		}
	}
}
winelords_focus_effect = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_election_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @focusPowerRight
			tooltip_side = DOR_winelords_side
		}
	}
}
winelords_focus_effect_med = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_election_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @focusPowerRightMed
			tooltip_side = DOR_winelords_side
		}
	}
}
winelords_focus_effect_big = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_election_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @focusPowerRightBig
			tooltip_side = DOR_winelords_side
		}
	}
}
winelords_focus_effect_large = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_election_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_election_power_balance
			value = @focusPowerRightLarge
			tooltip_side = DOR_winelords_side
		}
	}
}
burghers_focus_effect = {
	if = {
		limit = { has_power_balance = { id = DOR_great_merchants_power_balance } }
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @focusPowerLeft
			tooltip_side = DOR_burghers_side
		}
	}
}
burghers_focus_effect_med = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_great_merchants_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @focusPowerLeftMed
			tooltip_side = DOR_burghers_side
		}
	}
}
burghers_focus_effect_big = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_great_merchants_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @focusPowerLeftBig
			tooltip_side = DOR_burghers_side
		}
	}
}
burghers_focus_effect_large = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_great_merchants_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @focusPowerLeftLarge
			tooltip_side = DOR_burghers_side
		}
	}
}
merchant_houses_focus_effect = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_great_merchants_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @focusPowerRight
			tooltip_side = DOR_merchant_houses_side
		}
	}
}
merchant_houses_focus_effect_med = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_great_merchants_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @focusPowerRightMed
			tooltip_side = DOR_merchant_houses_side
		}
	}
}
merchant_houses_focus_effect_big = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_great_merchants_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @focusPowerRightBig
			tooltip_side = DOR_merchant_houses_side
		}
	}
}
merchant_houses_focus_effect_large = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_great_merchants_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_great_merchants_power_balance
			value = @focusPowerRightLarge
			tooltip_side = DOR_merchant_houses_side
		}
	}
}
koldana_focus_effect = {
	if = {
		limit = { has_power_balance = { id = DOR_winelords_power_balance } }
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @focusPowerLeft
			tooltip_side = DOR_koldana_side
		}
	}
}
koldana_focus_effect_med = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_winelords_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @focusPowerLeftMed
			tooltip_side = DOR_koldana_side
		}
	}
}
koldana_focus_effect_big = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_winelords_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @focusPowerLeftBig
			tooltip_side = DOR_koldana_side
		}
	}
}
koldana_focus_effect_large = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_winelords_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @focusPowerLeftLarge
			tooltip_side = DOR_koldana_side
		}
	}
}
vierling_focus_effect = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_winelords_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @focusPowerRight
			tooltip_side = DOR_vierling_side
		}
	}
}
vierling_focus_effect_med = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_winelords_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @focusPowerRightMed
			tooltip_side = DOR_vierling_side
		}
	}
}
vierling_focus_effect_big = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_winelords_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @focusPowerRightBig
			tooltip_side = DOR_vierling_side
		}
	}
}
vierling_focus_effect_large = {
	if = {
		limit = {
			has_power_balance = {
				id = DOR_winelords_power_balance
			}
		}
		add_power_balance_value = {
			id = DOR_winelords_power_balance
			value = @focusPowerRightLarge
			tooltip_side = DOR_vierling_side
		}
	}
}


koldana_aptitude_mission_reward = {
	add_power_balance_value = {
		id = DOR_election_power_balance
		value = @focusPowerRight
		tooltip_side = DOR_winelords_side
	}
}
koldana_aptitude_mission_timeout_effect = {} #nothing
koldana_aptitude_mission_cancel_effect = {} #nothing

accept_dorwinion_wine_effect = {
	add_political_power = -50
	add_equipment_to_stockpile = {
		type = wine_equipment
		amount = 1000
		producer = FROM
	}
	add_opinion_modifier = {
		target = FROM
		modifier = accepted_wine_gift
	}
	reverse_add_opinion_modifier = {
		target = FROM
		modifier = accepted_wine_gift
	}
	FROM = {
		add_political_power = 50
	}
}
DOR_seek_wisdom_of_elves_effect = {
	add_political_power = -20
	add_equipment_to_stockpile = {
		type = wine_equipment
		amount = 1000
		producer = FROM
	}
	add_opinion_modifier = {
		target = FROM
		modifier = accepted_wine_gift
	}
	reverse_add_opinion_modifier = {
		target = FROM
		modifier = accepted_wine_gift
	}
	FROM = {
		add_tech_bonus = {
			bonus = 0.5
			uses = 2
			category = cat_bureaucracy
		}
	}
}
accept_DOR_trade_delegation_effect = {
	add_political_power = -40
	capital_scope = { add_20_prosperity = yes }
	add_opinion_modifier = {
		target = FROM
		modifier = trade_delegation
	}
	reverse_add_opinion_modifier = {
		target = FROM
		modifier = trade_delegation
	}
	FROM = {
		random_controlled_state = {
			limit = { market > 0 }
			add_10_prosperity = yes
		}
	}
}
invest_partially_in_DOR_effect = {
	add_political_power = -50
	add_timed_idea = {
		idea = small_DOR_investment
		days = 365
	}
	reverse_add_opinion_modifier = {
		target = FROM
		modifier = small_investment
	}
	FROM = {
		random_core_state = {
			limit = { is_controlled_by = PREV }
			add_extra_state_shared_building_slots = 1
		}
	}
}
invest_fully_in_DOR_effect = {
	add_political_power = -50
	add_timed_idea = {
		idea = large_DOR_investment
		days = 365
	}
	random_core_state = {
		limit = {
			is_controlled_by = PREV
			market > 0
		}
		add_25_prosperity = yes
	}
	reverse_add_opinion_modifier = {
		target = FROM
		modifier = large_investment
	}
	FROM = {
		random_core_state = {
			limit = {
				is_controlled_by = PREV
				free_building_slots = {
					building = industrial_complex
					size > 0
					include_locked = yes
				}
			}
			add_extra_state_shared_building_slots = 1
			add_building_construction = {
				type = industrial_complex
				level = 1
				instant_build = yes
			}
		}
	}
}
reestablish_merchant_offices_effect = {
	random_core_state = {
		limit = { is_controlled_by = ROOT market > 0 }
		add_20_prosperity = yes
	}
	add_popularity = {
		ideology = FROM
		popularity = 0.1
	}
}
refuse_merchant_offices_effect = {
	add_opinion_modifier = {
		target = FROM
		modifier = suspicious
	}
	reverse_add_opinion_modifier = {
		target = FROM
		modifier = expelled_traders
	}
}

hawin_dies_effect = {
	custom_effect_tooltip = unimplemented
}

DOR_increase_army_morale = {#reduces level of demoralised army
	if = {
		limit = { has_idea = DOR_demoralized_army1 }
		remove_ideas = DOR_demoralized_army1
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army2 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army2
			add_idea = DOR_demoralized_army1
		}
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army3 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army3
			add_idea = DOR_demoralized_army2
		}
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army4 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army4
			add_idea = DOR_demoralized_army3
		}
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army5 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army5
			add_idea = DOR_demoralized_army4
		}
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army6 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army6
			add_idea = DOR_demoralized_army5
		}
	}
}
DOR_decrease_army_morale = {#increases level of demoralised army
	if = {
		limit = { has_idea = DOR_demoralized_army1 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army1
			add_idea = DOR_demoralized_army2
		}
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army2 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army2
			add_idea = DOR_demoralized_army3
		}
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army3 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army3
			add_idea = DOR_demoralized_army4
		}
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army4 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army4
			add_idea = DOR_demoralized_army5
		}
	}
	else_if = {
		limit = { has_idea = DOR_demoralized_army5 }
		swap_ideas = {
			remove_idea = DOR_demoralized_army5
			add_idea = DOR_demoralized_army6
		}
	}
}

DOR_upgrade_college_of_philosophy = {
	if = {
		limit = { has_idea = DOR_college_of_philosophy_1 }
		swap_ideas = {
			remove_idea = DOR_college_of_philosophy_1
			add_idea = DOR_college_of_philosophy_2
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_philosophy_2 }
		swap_ideas = {
			remove_idea = DOR_college_of_philosophy_2
			add_idea = DOR_college_of_philosophy_3
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_philosophy_3 }
		swap_ideas = {
			remove_idea = DOR_college_of_philosophy_3
			add_idea = DOR_college_of_philosophy_4
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_philosophy_4 }
		swap_ideas = {
			remove_idea = DOR_college_of_philosophy_4
			add_idea = DOR_college_of_philosophy_5
		}
	}
	DOR_increase_university_level_1 = yes
}
DOR_upgrade_college_of_manners = {
	if = {
		limit = { has_idea = DOR_college_of_manners_1 }
		swap_ideas = {
			remove_idea = DOR_college_of_manners_1
			add_idea = DOR_college_of_manners_2
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_manners_2 }
		swap_ideas = {
			remove_idea = DOR_college_of_manners_2
			add_idea = DOR_college_of_manners_3
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_manners_3 }
		swap_ideas = {
			remove_idea = DOR_college_of_manners_3
			add_idea = DOR_college_of_manners_4
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_manners_4 }
		swap_ideas = {
			remove_idea = DOR_college_of_manners_4
			add_idea = DOR_college_of_manners_5
		}
	}
	DOR_increase_university_level_1 = yes
}
DOR_upgrade_college_of_medicine = {
	if = {
		limit = { has_idea = DOR_college_of_medicine_1 }
		swap_ideas = {
			remove_idea = DOR_college_of_medicine_1
			add_idea = DOR_college_of_medicine_2
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_medicine_2 }
		swap_ideas = {
			remove_idea = DOR_college_of_medicine_2
			add_idea = DOR_college_of_medicine_3
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_medicine_3 }
		swap_ideas = {
			remove_idea = DOR_college_of_medicine_3
			add_idea = DOR_college_of_medicine_4
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_medicine_4 }
		swap_ideas = {
			remove_idea = DOR_college_of_medicine_4
			add_idea = DOR_college_of_medicine_5
		}
	}
	DOR_increase_university_level_1 = yes
}
DOR_upgrade_college_of_tactics = {
	if = {
		limit = { has_idea = DOR_college_of_tactics_1 }
		swap_ideas = {
			remove_idea = DOR_college_of_tactics_1
			add_idea = DOR_college_of_tactics_2
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_tactics_2 }
		swap_ideas = {
			remove_idea = DOR_college_of_tactics_2
			add_idea = DOR_college_of_tactics_3
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_tactics_3 }
		swap_ideas = {
			remove_idea = DOR_college_of_tactics_3
			add_idea = DOR_college_of_tactics_4
		}
	}
	else_if = {
		limit = { has_idea = DOR_college_of_tactics_4 }
		swap_ideas = {
			remove_idea = DOR_college_of_tactics_4
			add_idea = DOR_college_of_tactics_5
		}
	}
	DOR_increase_university_level_1 = yes
}

DOR_increase_university_level_1 = {
	add_to_variable = { university_size = 1 }
	custom_effect_tooltip = DOR_increase_university_level_1
}
DOR_increase_university_level_2 = {
	add_to_variable = { university_size = 2 }
	custom_effect_tooltip = DOR_increase_university_level_2
}


convert_half_isolationism_to_freedom = {
	custom_effect_tooltip = convert_half_isolationism_to_freedom
	hidden_effect = {
		save_current_politics = yes
		set_temp_variable = { conversion = savedIsolationism }
		divide_temp_variable = { conversion = 2 }
		add_to_variable = { savedFreedom = conversion }
		subtract_from_variable = { savedIsolationism = conversion }
		load_saved_politics = yes
		clear_saved_politics = yes
	}
}
